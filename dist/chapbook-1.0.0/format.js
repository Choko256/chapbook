window.storyFormat({"author":"Chris Klimas","name":"Chapbook","proofing":false,"source":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>{{STORY_NAME}}</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<style>.fade-in {\n  opacity: 0;\n  animation: fade-in 1s ease-out forwards; }\n\n.fade-out {\n  animation: fade-in 1s ease-out reverse forwards; }\n\n@keyframes fade-in {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n\n.cb-color-picker .swatches {\n  display: flex;\n  padding: 0 4px; }\n\n.cb-color-picker .hue {\n  display: flex;\n  flex-direction: column;\n  border-top: 1px solid #adb5bd;\n  border-bottom: 1px solid #adb5bd; }\n  .cb-color-picker .hue:first-child {\n    border-left: 1px solid #adb5bd; }\n  .cb-color-picker .hue:last-child {\n    border-right: 1px solid #adb5bd; }\n\n.cb-color-picker button {\n  box-sizing: border-box;\n  display: inline-block;\n  width: 15px;\n  height: 15px;\n  padding: 0;\n  border: none; }\n  .cb-color-picker button:hover {\n    transform: scale(1.25);\n    box-shadow: 0 0 0 1px black; }\n\n#cb-debug .cb-color-picker button {\n  border: none;\n  border-radius: 0; }\n\nbody.with-debugger {\n  align-items: flex-start; }\n\n#cb-debug {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: calc(100vw - 40em - 2 * 1em);\n  font-size: 18px;\n  background: #ced4da;\n  color: black;\n  border-left: 1px solid black;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu Cantarell, 'Helvetica Neue', sans-serif; }\n  #cb-debug ul.tabs {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    border-bottom: 1px solid black;\n    font-size: 12px; }\n    #cb-debug ul.tabs li {\n      flex-grow: 1;\n      border-right: 1px solid black;\n      text-align: center; }\n      #cb-debug ul.tabs li:last-child {\n        border-right: none; }\n      #cb-debug ul.tabs li a {\n        color: black;\n        text-decoration: none;\n        display: block;\n        height: 20px;\n        padding: 4px; }\n        #cb-debug ul.tabs li a.active {\n          background: black;\n          color: #ced4da; }\n  #cb-debug .panel h2 {\n    margin: 0; }\n    #cb-debug .panel h2 button {\n      text-align: left;\n      background: none;\n      border: none;\n      width: 100%;\n      font-weight: normal;\n      color: #495057;\n      text-transform: uppercase;\n      font-size: 70%;\n      letter-spacing: 0.075em;\n      font-size: 11px;\n      padding: 0 4px; }\n      #cb-debug .panel h2 button:before {\n        content: '\\25ba';\n        display: inline-block;\n        width: 1.25em; }\n      #cb-debug .panel h2 button:hover {\n        color: black; }\n  #cb-debug .panel .content {\n    display: none; }\n  #cb-debug .panel.open h2 button:before {\n    content: '\\25bc'; }\n  #cb-debug .panel.open .content {\n    display: block; }\n  #cb-debug .tab-content {\n    display: none; }\n    #cb-debug .tab-content.active {\n      display: block; }\n  #cb-debug button {\n    background: #f1f3f5;\n    padding: 4px;\n    border-radius: 8px;\n    border: 1px solid #adb5bd; }\n  #cb-debug p {\n    padding: 0 4px; }\n  #cb-debug p,\n  #cb-debug li,\n  #cb-debug td {\n    font-size: 12px; }\n  #cb-debug table {\n    background: #f1f3f5;\n    table-layout: fixed;\n    border-collapse: collapse;\n    width: 100%; }\n  #cb-debug td {\n    position: relative;\n    border: 1px solid #adb5bd;\n    padding: 4px;\n    vertical-align: top; }\n    #cb-debug td:first-child {\n      border-left: none; }\n    #cb-debug td:last-child {\n      border-right: none; }\n    #cb-debug td input {\n      background: none;\n      border: none;\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      padding: 4px; }\n  #cb-debug textarea {\n    background: #f1f3f5;\n    border: 1px solid #adb5bd;\n    padding: 4px;\n    width: 100%;\n    height: 7.75em; }\n  #cb-debug .block {\n    display: block;\n    margin: 4px;\n    width: calc(100% - 8px); }\n  #cb-debug .disabled {\n    color: #757575; }\n  #cb-debug .segmented-button {\n    display: flex; }\n    #cb-debug .segmented-button button {\n      border-left: none;\n      border-radius: 0;\n      flex-grow: 1; }\n      #cb-debug .segmented-button button:first-child {\n        border-left: 1px solid #adb5bd;\n        border-top-left-radius: 8px;\n        border-bottom-left-radius: 8px; }\n      #cb-debug .segmented-button button:last-child {\n        border-top-right-radius: 8px;\n        border-bottom-right-radius: 8px; }\n    #cb-debug .segmented-button .fixed {\n      flex-grow: 0;\n      min-width: 24px; }\n  #cb-debug .tab-content {\n    max-height: calc(100vh - 20px);\n    overflow: auto; }\n\n* {\n  box-sizing: border-box; }\n\nbody {\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center; }\n\nimg {\n  max-width: 100%;\n  height: auto; }\n\ninput[type='text'],\nselect {\n  padding: 0.25em; }\n\npre {\n  font-family: 'Courier New', 'Courier', monospace;\n  display: block;\n  overflow: auto;\n  line-height: 120%; }\n\ntw-storydata {\n  display: none; }\n\n.page {\n  /*\n\tIn order to expose things to authors, many default display properties are\n\tset in style/index.js, specifically the init() function.\n\t*/\n  width: 40em;\n  max-width: calc(100vw - 2em);\n  line-height: 150%;\n  min-height: calc(100vh - 2em);\n  margin: 1em;\n  padding: 4em 4em 2em 4em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center; }\n  .page article {\n    flex-grow: 1; }\n    .page article :first-child {\n      margin-top: 0; }\n  .page header,\n  .page footer {\n    display: flex; }\n    .page header span,\n    .page footer span {\n      flex-grow: 1; }\n    .page header p,\n    .page footer p {\n      margin: 0.5em 0 0 0; }\n    .page header .center,\n    .page footer .center {\n      text-align: center; }\n    .page header .right,\n    .page footer .right {\n      text-align: right; }\n  .page header {\n    margin-top: 0; }\n    .page header.has-content {\n      border-bottom: 1px solid black; }\n  .page footer {\n    margin-bottom: 0; }\n    .page footer.has-content {\n      border-top: 1px solid black; }\n  .page hr {\n    border: none; }\n    .page hr:after {\n      content: '* \\a0 * \\a0 *';\n      display: block;\n      text-align: center; }\n  .page .small-caps {\n    text-transform: uppercase;\n    font-size: 70%;\n    letter-spacing: 0.075em; }\n  .page .system {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu Cantarell, 'Helvetica Neue', sans-serif;\n    font-size: 14px; }\n  .page .error,\n  .page .warning {\n    background: #fff5f5;\n    color: #c92a2a;\n    padding: 0.5em;\n    margin-bottom: 1em;\n    overflow: auto; }\n    .page .error :first-child,\n    .page .warning :first-child {\n      margin-top: 0; }\n    .page .error :last-child,\n    .page .warning :last-child {\n      margin-bottom: 0; }\n  .page .error a {\n    color: #c92a2a;\n    text-decoration-color: #c92a2a; }\n    .page .error a:hover {\n      color: #fa5252;\n      text-decoration-color: #fa5252; }\n  .page .warning {\n    background: #fff9db;\n    color: #e67700; }\n    .page .warning a {\n      color: #e67700;\n      text-decoration-color: #e67700; }\n      .page .warning a:hover {\n        color: #fab005;\n        text-decoration-color: #fab005; }\n</style>\n\t</head>\n\t<body>\n\t\t<form id=\"cb-validation\" action=\"javascript:void(0)\">\n\t\t\t<button id=\"cb-validation-tester\" hidden></button>\n\t\t\t<button id=\"cb-block-enter-key\" hidden></button>\n\t\t\t<div class=\"page\" aria-live=\"polite\">\n\t\t\t\t<header></header>\n\t\t\t\t<div class=\"messages\"></div>\n\t\t\t\t<article>\n\t\t\t\t</article>\n\t\t\t\t<footer></footer>\n\t\t\t</div>\n\t\t</form>\n\t\t{{STORY_DATA}}\n\t\t<script>(function () {\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"'`]/g;\nvar reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '`': '&#96;'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in IE < 9, they can break out of\n * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the\n * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nvar lodash_escape = escape;\n\n/*\nHandles reporting problems to the user. This mainly is designed to handle the\nwarnings and errors coming from a Renderer instance, but it also listens for\nuncaught JS exceptions.\n*/\n\nclass Alarm {\n\tconstructor(el, vars) {\n\t\tthis.el = el;\n\t\tthis.vars = vars;\n\t\tthis.vars.default(\n\t\t\t'config.alarm.forceRestartMessage',\n\t\t\t'<p>If you are unable to continue forward, then you may <a href=\"javascript:if(confirm(\\'Are you sure you want to force restart? This will erase all saved progress.\\')){localStorage&&localStorage.clear&&localStorage.clear();location.reload()}\">force restart</a>.</p>'\n\t\t);\n\t\tthis.vars.default('config.alarm.enabled', true);\n\t\tthis.warnings = [];\n\t\tthis.errors = [];\n\t\twindow.addEventListener('error', e => this.handleErrorEvent(e));\n\t}\n\n\tupdate(errors, warnings) {\n\t\tthis.errors = errors;\n\t\tthis.warnings = warnings;\n\t\tthis.render();\n\t}\n\n\taddError(err) {\n\t\tthis.errors.push(err);\n\t\tthis.render();\n\t}\n\n\taddWarning(warn) {\n\t\tthis.warnings.push(warn);\n\t\tthis.render();\n\t}\n\n\trender() {\n\t\tlet result = '';\n\n\t\tif (this.vars.get('config.alarm.enabled')) {\n\t\t\tthis.errors.forEach((err, index) => {\n\t\t\t\tresult += `<div class=\"system error\">${err}`;\n\n\t\t\t\tif (index === this.errors.length - 1) {\n\t\t\t\t\tresult += this.vars.get('config.alarm.forceRestartMessage');\n\t\t\t\t}\n\n\t\t\t\tresult += '</div>';\n\t\t\t});\n\n\t\t\tif (this.vars.get('testing')) {\n\t\t\t\tthis.warnings.forEach(warn => {\n\t\t\t\t\tresult += `<div class=\"system warning\">${warn}</div>`;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.el.innerHTML = result;\n\t}\n\n\thandleErrorEvent(e) {\n\t\t/*\n\t\tMarked will blame itself if rendering has problems, but it probably is\n\t\tour fault, so remove that pointer.\n\t\t*/\n\n\t\tconst markedError =\n\t\t\t'\\nPlease report this to https://github.com/chjj/marked.';\n\n\t\ttry {\n\t\t\tlet detail = '';\n\n\t\t\tif (e.error && e.error.stack) {\n\t\t\t\tdetail = e.error.stack;\n\t\t\t} else {\n\t\t\t\tdetail = e.message + '\\n[No stack trace available]';\n\t\t\t}\n\n\t\t\tdetail = detail.replace(markedError, '');\n\t\t\tthis.addError(\n\t\t\t\t`<p>An unexpected problem has occurred.</p><pre>${lodash_escape(detail)}</pre>`\n\t\t\t);\n\t\t\te.preventDefault();\n\t\t} catch (e) {\n\t\t\t/* Things have gotten really screwy-- at least log the error. */\n\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n}\n\nvar lodash_clonedeep = createCommonjsModule(function (module, exports) {\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n});\n\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nvar matchesSelector = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}\n\nvar closest = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode;\r\n\r\n  while (parent && parent !== document) {\r\n    if (matchesSelector(parent, selector)) return parent;\r\n    parent = parent.parentNode;\r\n  }\r\n};\n\nclass Panel {\n\tconstructor(title, htmlContent = '') {\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.classList.add('panel');\n\t\tconst titleContainer = document.createElement('h2');\n\t\tthis.titleEl = document.createElement('button');\n\t\tthis.titleEl.addEventListener('click', () => (this.open = !this.open));\n\t\ttitleContainer.appendChild(this.titleEl);\n\t\tthis.contentEl = document.createElement('div');\n\t\tthis.contentEl.classList.add('content');\n\t\tthis.contentEl.innerHTML = htmlContent;\n\t\tthis.el.appendChild(titleContainer);\n\t\tthis.el.appendChild(this.contentEl);\n\t\tthis.title = title;\n\t\tthis.open = true;\n\t}\n\n\tget title() {\n\t\treturn this._title;\n\t}\n\n\tset title(value) {\n\t\tthis._title = value;\n\t\tthis.titleEl.innerHTML = value;\n\t}\n\n\tget open() {\n\t\treturn this._open;\n\t}\n\n\tset open(value) {\n\t\tif (value) {\n\t\t\tthis.el.classList.add('open');\n\t\t} else {\n\t\t\tthis.el.classList.remove('open');\n\t\t}\n\n\t\tthis._open = value;\n\t}\n\n\thook(name) {\n\t\treturn this.el.querySelector(`[data-hook=\"${name}\"]`);\n\t}\n\n\thooks(name) {\n\t\treturn Array.from(this.el.querySelectorAll(`[data-hook=\"${name}\"]`));\n\t}\n}\n\nvar html = \"<button class=\\\"block\\\" data-hook=\\\"add-snapshot\\\">Add Snapshot</button>\\n<div data-hook=\\\"snapshot-list\\\"></div>\";\n\n/* A panel displaying allowing the user to save and restore state snapshots. */\n\nclass Snapshots extends Panel {\n\tconstructor(vars, view, story, passage) {\n\t\tsuper('Snapshots', html);\n\t\tthis.vars = vars;\n\t\tthis.view = view;\n\t\tthis.story = story;\n\t\tthis.passage = passage;\n\t\tthis.snapshots = {};\n\t\tthis.restore();\n\n\t\tthis.snapshotList = this.hook('snapshot-list');\n\t\tthis.snapshotList.addEventListener('click', e => {\n\t\t\tconst loadSnapshot = closest(e.target, '[data-load-snapshot]', true);\n\n\t\t\tif (loadSnapshot) {\n\t\t\t\tthis.loadSnapshot(loadSnapshot.dataset.loadSnapshot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst deleteSnapshot = closest(e.target, '[data-delete-snapshot]', true);\n\n\t\t\tif (\n\t\t\t\tdeleteSnapshot &&\n\t\t\t\twindow.confirm(\n\t\t\t\t\t`Are you sure you want to delete the snapshot \"${\n\t\t\t\t\t\tdeleteSnapshot.dataset.deleteSnapshot\n\t\t\t\t\t}\"? This cannot be undone.`\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.removeSnapshot(deleteSnapshot.dataset.deleteSnapshot);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\tthis.hook('add-snapshot').addEventListener('click', () => {\n\t\t\tconst name = window.prompt('Enter a name for this snapshot:');\n\n\t\t\tif (name) {\n\t\t\t\tthis.addSnapshot(name);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tupdate() {\n\t\tthis.snapshotList.innerHTML = Object.keys(this.snapshots)\n\t\t\t.sort()\n\t\t\t.reduce(\n\t\t\t\t(result, current) =>\n\t\t\t\t\tresult +\n\t\t\t\t\t`<div class=\"segmented-button block\"><button data-load-snapshot=\"${current}\" aria-label=\"Load snapshot &quot;${current}&quot;\">${current}</button><button data-delete-snapshot=\"${current}\" aria-label=\"Delete snapshot &quot;${current}&quot;\" class=\"fixed\"><strong>&times;</strong></button></div>`,\n\t\t\t\t''\n\t\t\t);\n\t}\n\n\taddSnapshot(name) {\n\t\tthis.snapshots[name] = lodash_clonedeep(this.vars.toJSON());\n\t\tthis.update();\n\t\tthis.save();\n\t}\n\n\tremoveSnapshot(name) {\n\t\tdelete this.snapshots[name];\n\t\tthis.update();\n\t\tthis.save();\n\t}\n\n\tloadSnapshot(name) {\n\t\tconst snapshot = this.snapshots[name];\n\n\t\tif (!snapshot) {\n\t\t\tthrow new Error(`There is no snapshot named \"${name}\".`);\n\t\t}\n\n\t\t/*\n\t\tRestore variables. We have to be careful here to create copies so that\n\t\tfurther changes don't alter the snapshot.\n\t\t*/\n\n\t\tObject.keys(this.snapshots[name].vars).forEach(k =>\n\t\t\tthis.vars.set(k, lodash_clonedeep(snapshot.vars[k]))\n\t\t);\n\n\t\t/* Re-display the last passage without altering the trail. */\n\n\t\tthis.view.show(\n\t\t\tthis.passage(snapshot.vars.trail[snapshot.vars.trail.length - 1])\n\t\t);\n\t}\n\n\tsave() {\n\t\twindow.localStorage.setItem(\n\t\t\t`cb-snapshots-${this.story.name}`,\n\t\t\tJSON.stringify(this.snapshots)\n\t\t);\n\t}\n\n\trestore() {\n\t\tconst toRestore = window.localStorage.getItem(\n\t\t\t`cb-snapshots-${this.story.name}`\n\t\t);\n\n\t\tif (toRestore) {\n\t\t\tthis.snapshots = JSON.parse(toRestore);\n\t\t}\n\t}\n}\n\nvar html$1 = \"<p>\\n\\t<input type=\\\"checkbox\\\" id=\\\"cb-debug-state-show-defaults\\\">\\n\\t<label for=\\\"cb-debug-state-show-defaults\\\">Show Defaults</label>\\n</p>\\n<div data-hook=\\\"vars-table\\\"></div>\";\n\n/* A panel displaying the current vars. */\n\nclass Vars extends Panel {\n\tconstructor(vars) {\n\t\tsuper('Variables', html$1);\n\t\tthis.showDefaults = false;\n\t\tthis.vars = vars;\n\t\tthis.vars.addListener('*', () => this.update());\n\t\tthis.varsTable = this.hook('vars-table');\n\n\t\tthis.varsTable.addEventListener('change', e => {\n\t\t\tconst input = closest(e.target, '[data-var]', true);\n\n\t\t\tif (input) {\n\t\t\t\ttry {\n\t\t\t\t\tconst newValue = new Function(`return ${input.value}`)();\n\n\t\t\t\t\tthis.vars.set(input.dataset.var, newValue);\n\t\t\t\t} catch (e) {\n\t\t\t\t\twindow.alert(\n\t\t\t\t\t\t`The expression \"${lodash_escape(input.value)}\" could not be evaluated (${\n\t\t\t\t\t\t\te.message\n\t\t\t\t\t\t}).`\n\t\t\t\t\t);\n\n\t\t\t\t\tinput.value = this.vars.get(input.dataset.var);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.varsTable.addEventListener('click', e => {\n\t\t\tconst input = closest(e.target, '[data-var]', true);\n\n\t\t\tif (input) {\n\t\t\t\tinput.select();\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tupdate() {\n\t\tlet keys = this.vars.keys;\n\n\t\tif (!this.showDefaults) {\n\t\t\tkeys = keys.filter(k => this.vars.defaults[k] !== this.vars.get(k));\n\t\t}\n\n\t\tthis.varsTable.innerHTML = `<table>${keys.reduce((result, key) => {\n\t\t\tconst k = lodash_escape(key);\n\t\t\tconst value = lodash_escape(JSON.stringify(this.vars.get(k)));\n\n\t\t\treturn (\n\t\t\t\tresult +\n\t\t\t\t`<tr><td class=\"disabled\">${k}</td><td><input type=\"text\" id=\"cb-debug-variable-${k}\" data-var=\"${k}\" value=\"${value}\"></td></tr>`\n\t\t\t);\n\t\t}, '')}</table>`;\n\t}\n}\n\nclass StateTab {\n\tconstructor(tabs) {\n\t\tconst contentEl = tabs.add('State');\n\n\t\tcontentEl.appendChild(new Vars(vars).el);\n\t\tcontentEl.appendChild(new Snapshots(vars, view, story, passage).el);\n\t}\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$1 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag$1 = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\nvar rsDingbatRange = '\\\\u2700-\\\\u27bf';\nvar rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff';\nvar rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7';\nvar rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf';\nvar rsPunctuationRange = '\\\\u2000-\\\\u206f';\nvar rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000';\nvar rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde';\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\nvar rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\nvar rsBreak = '[' + rsBreakRange + ']';\nvar rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';\nvar rsDigits = '\\\\d+';\nvar rsDingbat = '[' + rsDingbatRange + ']';\nvar rsLower = '[' + rsLowerRange + ']';\nvar rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsUpper = '[' + rsUpperRange + ']';\nvar rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')';\nvar rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')';\nvar rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?';\nvar rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?';\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange + ']?';\nvar rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf$1(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf$1(deburredLetters);\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$1 = objectProto$1.toString;\n\n/** Built-in value references. */\nvar Symbol$1 = root$1.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$1(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$1(value)) {\n    return symbolToString$1 ? symbolToString$1.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$1(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$1(value) {\n  return value == null ? '' : baseToString$1(value);\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString$1(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString$1(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nvar lodash_kebabcase = kebabCase;\n\nvar white = \"#ffffff\";\nvar black = \"#000000\";\nvar gray = [\n\t\"#f8f9fa\",\n\t\"#f1f3f5\",\n\t\"#e9ecef\",\n\t\"#dee2e6\",\n\t\"#ced4da\",\n\t\"#adb5bd\",\n\t\"#868e96\",\n\t\"#495057\",\n\t\"#343a40\",\n\t\"#212529\"\n];\nvar red = [\n\t\"#fff5f5\",\n\t\"#ffe3e3\",\n\t\"#ffc9c9\",\n\t\"#ffa8a8\",\n\t\"#ff8787\",\n\t\"#ff6b6b\",\n\t\"#fa5252\",\n\t\"#f03e3e\",\n\t\"#e03131\",\n\t\"#c92a2a\"\n];\nvar pink = [\n\t\"#fff0f6\",\n\t\"#ffdeeb\",\n\t\"#fcc2d7\",\n\t\"#faa2c1\",\n\t\"#f783ac\",\n\t\"#f06595\",\n\t\"#e64980\",\n\t\"#d6336c\",\n\t\"#c2255c\",\n\t\"#a61e4d\"\n];\nvar grape = [\n\t\"#f8f0fc\",\n\t\"#f3d9fa\",\n\t\"#eebefa\",\n\t\"#e599f7\",\n\t\"#da77f2\",\n\t\"#cc5de8\",\n\t\"#be4bdb\",\n\t\"#ae3ec9\",\n\t\"#9c36b5\",\n\t\"#862e9c\"\n];\nvar violet = [\n\t\"#f3f0ff\",\n\t\"#e5dbff\",\n\t\"#d0bfff\",\n\t\"#b197fc\",\n\t\"#9775fa\",\n\t\"#845ef7\",\n\t\"#7950f2\",\n\t\"#7048e8\",\n\t\"#6741d9\",\n\t\"#5f3dc4\"\n];\nvar indigo = [\n\t\"#edf2ff\",\n\t\"#dbe4ff\",\n\t\"#bac8ff\",\n\t\"#91a7ff\",\n\t\"#748ffc\",\n\t\"#5c7cfa\",\n\t\"#4c6ef5\",\n\t\"#4263eb\",\n\t\"#3b5bdb\",\n\t\"#364fc7\"\n];\nvar blue = [\n\t\"#e7f5ff\",\n\t\"#d0ebff\",\n\t\"#a5d8ff\",\n\t\"#74c0fc\",\n\t\"#4dabf7\",\n\t\"#339af0\",\n\t\"#228be6\",\n\t\"#1c7ed6\",\n\t\"#1971c2\",\n\t\"#1864ab\"\n];\nvar cyan = [\n\t\"#e3fafc\",\n\t\"#c5f6fa\",\n\t\"#99e9f2\",\n\t\"#66d9e8\",\n\t\"#3bc9db\",\n\t\"#22b8cf\",\n\t\"#15aabf\",\n\t\"#1098ad\",\n\t\"#0c8599\",\n\t\"#0b7285\"\n];\nvar teal = [\n\t\"#e6fcf5\",\n\t\"#c3fae8\",\n\t\"#96f2d7\",\n\t\"#63e6be\",\n\t\"#38d9a9\",\n\t\"#20c997\",\n\t\"#12b886\",\n\t\"#0ca678\",\n\t\"#099268\",\n\t\"#087f5b\"\n];\nvar green = [\n\t\"#ebfbee\",\n\t\"#d3f9d8\",\n\t\"#b2f2bb\",\n\t\"#8ce99a\",\n\t\"#69db7c\",\n\t\"#51cf66\",\n\t\"#40c057\",\n\t\"#37b24d\",\n\t\"#2f9e44\",\n\t\"#2b8a3e\"\n];\nvar lime = [\n\t\"#f4fce3\",\n\t\"#e9fac8\",\n\t\"#d8f5a2\",\n\t\"#c0eb75\",\n\t\"#a9e34b\",\n\t\"#94d82d\",\n\t\"#82c91e\",\n\t\"#74b816\",\n\t\"#66a80f\",\n\t\"#5c940d\"\n];\nvar yellow = [\n\t\"#fff9db\",\n\t\"#fff3bf\",\n\t\"#ffec99\",\n\t\"#ffe066\",\n\t\"#ffd43b\",\n\t\"#fcc419\",\n\t\"#fab005\",\n\t\"#f59f00\",\n\t\"#f08c00\",\n\t\"#e67700\"\n];\nvar orange = [\n\t\"#fff4e6\",\n\t\"#ffe8cc\",\n\t\"#ffd8a8\",\n\t\"#ffc078\",\n\t\"#ffa94d\",\n\t\"#ff922b\",\n\t\"#fd7e14\",\n\t\"#f76707\",\n\t\"#e8590c\",\n\t\"#d9480f\"\n];\nvar colors = {\n\twhite: white,\n\tblack: black,\n\tgray: gray,\n\tred: red,\n\tpink: pink,\n\tgrape: grape,\n\tviolet: violet,\n\tindigo: indigo,\n\tblue: blue,\n\tcyan: cyan,\n\tteal: teal,\n\tgreen: green,\n\tlime: lime,\n\tyellow: yellow,\n\torange: orange\n};\n\nconst colorOrder = [\n\t'gray',\n\t'red',\n\t'pink',\n\t'grape',\n\t'violet',\n\t'indigo',\n\t'blue',\n\t'cyan',\n\t'teal',\n\t'green',\n\t'lime',\n\t'yellow',\n\t'orange'\n];\n\nclass ColorPicker {\n\tconstructor(container, id, label, callback) {\n\t\tthis.callback = callback;\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.classList.add('cb-color-picker');\n\t\tthis.el.innerHTML =\n\t\t\t`<p><label for=\"${id}\">${label}</label><input type=\"text\" id=\"${id}\"></p>` +\n\t\t\t'<div class=\"swatches\">' +\n\t\t\tcolorOrder.reduce((output, hue) => {\n\t\t\t\treturn (\n\t\t\t\t\toutput +\n\t\t\t\t\t'<div class=\"hue\">' +\n\t\t\t\t\tcolors[hue].reduce(\n\t\t\t\t\t\t(o, c, i) =>\n\t\t\t\t\t\t\to +\n\t\t\t\t\t\t\t`<button style=\"background: ${c}\" data-color=\"${hue}-${i}\" aria-label=\"${hue}-${i}\"></button>`,\n\t\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t\t'</div>'\n\t\t\t\t);\n\t\t\t}, '') +\n\t\t\t'</div>';\n\t\tthis.inputEl = this.el.querySelector('input[type=\"text\"]');\n\n\t\tthis.el.addEventListener('click', e => {\n\t\t\tconst button = closest(e.target, '[data-color]', true);\n\n\t\t\tif (button) {\n\t\t\t\tthis.inputEl.value = button.dataset.color;\n\t\t\t\tthis.callback(button.dataset.color);\n\t\t\t}\n\t\t});\n\n\t\tcontainer.appendChild(this.el);\n\t}\n\n\tset(value) {\n\t\tthis.inputEl.value = value;\n\t}\n}\n\nvar fields = [\n\t{\n\t\tname: 'Text',\n\t\tfields: [\n\t\t\t{\n\t\t\t\tlabel: 'Text Font',\n\t\t\t\ttype: 'font',\n\t\t\t\tbind: 'config.style.font'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Text Font Size',\n\t\t\t\ttype: 'number',\n\t\t\t\tbind: 'config.style.fontSize'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Foreground Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.fg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Background Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.bg'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: 'Links',\n\t\tfields: [\n\t\t\t{\n\t\t\t\tlabel: 'Link Style',\n\t\t\t\ttype: 'select',\n\t\t\t\tbind: 'config.style.linkStyle',\n\t\t\t\toptions: {\n\t\t\t\t\tBold: 'bold',\n\t\t\t\t\tItalic: 'italic',\n\t\t\t\t\tNone: 'none',\n\t\t\t\t\t'Small Caps': 'small caps',\n\t\t\t\t\tUnderline: 'underline'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Link Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.linkColor'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Link Active Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.linkActiveColor'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Link Underline Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.linkLineColor'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: 'Page',\n\t\tfields: [\n\t\t\t{\n\t\t\t\tlabel: 'Page Style',\n\t\t\t\ttype: 'select',\n\t\t\t\tbind: 'config.style.pageStyle',\n\t\t\t\toptions: {\n\t\t\t\t\tNone: 'none',\n\t\t\t\t\tShadow: 'shadow',\n\t\t\t\t\t'Thick Line': 'thick line',\n\t\t\t\t\t'Thin Line': 'thin line'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Page Backdrop',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.backdrop'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Page Border Color',\n\t\t\t\ttype: 'color',\n\t\t\t\tbind: 'config.style.pageBorderColor'\n\t\t\t}\n\t\t]\n\t}\n];\n\nvar html$2 = \"<p>\\n\\t<label for=\\\"cb-debug-style-vars\\\">Enter this code into your first passage&rsquo;s vars section to permanently use this style:</label>\\n</p>\\n<p>\\n\\t<textarea id=\\\"cb-debug-style-vars\\\" data-hook=\\\"code\\\"></textarea>\\n</p>\";\n\nlet binds = Object.keys(\n\tfields.reduce((result, field) => {\n\t\tfield.fields.forEach(f => {\n\t\t\tresult[f.bind] = true;\n\t\t});\n\n\t\treturn result;\n\t}, {})\n).sort();\n\nclass Config extends Panel {\n\tconstructor(vars) {\n\t\tsuper('Config', html$2);\n\t\tthis.vars = vars;\n\t\tthis.hook('code').addEventListener('focus', () =>\n\t\t\tthis.hook('code').select()\n\t\t);\n\t}\n\n\tupdate() {\n\t\tthis.hook('code').value = binds.reduce(\n\t\t\t(out, bind) =>\n\t\t\t\tout + `${bind}: ${JSON.stringify(this.vars.get(bind))}\\n`,\n\t\t\t''\n\t\t);\n\t}\n}\n\nconst choices = {\n\t'Arial/Helvetica': '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n\t'Consolas/Menlo': 'Consolas, Menlo, Monaco, monospace',\n\tCourier:\n\t\t'Courier, \"Courier New\", \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace',\n\tGeorgia: 'Georgia, Times, Times New Roman, serif',\n\t'Gill Sans': '\"Gill Sans\", \"Gill Sans MT\", sans-serif',\n\tPalatino: 'Palatino, \"Palatino Linotype\", Georgia, serif',\n\tTimes: 'Times, \"Times New Roman\", Georgia, serif',\n\tTrebuchet:\n\t\t'\"Trebuchet MS\", \"Lucida Grande\", \"Lucida Sans Unicode\", \"Lucida Sans\", Tahoma, sans-serif',\n\tVerdana: 'Verdana, Geneva, sans-serif'\n};\n\nclass FontPicker {\n\tconstructor(container, id, label, callback) {\n\t\tthis.callback = callback;\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.classList.add('cb-font-picker');\n\n\t\tthis.el.innerHTML =\n\t\t\t`<p><label for=\"${id}\">${label}</label><select id=\"${id}\">` +\n\t\t\tObject.keys(choices)\n\t\t\t\t.sort()\n\t\t\t\t.reduce(\n\t\t\t\t\t(output, current) =>\n\t\t\t\t\t\toutput +\n\t\t\t\t\t\t`<option value=\"${lodash_escape(choices[current])}\">${current}</option>`,\n\t\t\t\t\t''\n\t\t\t\t) +\n\t\t\t'</select>';\n\t\tcontainer.appendChild(this.el);\n\n\t\tthis.el.addEventListener('change', e => {\n\t\t\tif (e.target.nodeName === 'SELECT') {\n\t\t\t\tthis.callback(e.target.options[e.target.selectedIndex].value);\n\t\t\t}\n\t\t});\n\t}\n\n\tset(value) {\n\t\tconst select = this.el.querySelector('select');\n\n\t\tArray.from(select.options).forEach((o, index) => {\n\t\t\tif (o.value === value) {\n\t\t\t\tselect.selectedIndex = index;\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction numberHtmlForField(field, id) {\n\treturn `<p><label for=\"${id}\">${\n\t\tfield.label\n\t}</label><input type=\"number\" id=\"${id}\" data-bind=\"${field.bind}\"></p>`;\n}\n\nfunction pickerHtmlForField(field, id) {\n\treturn `<div data-container=\"${field.type}-picker\" data-label=\"${\n\t\tfield.label\n\t}\" data-id=\"${id}\" data-to-bind=\"${field.bind}\"></div>`;\n}\n\nfunction selectHtmlForField(field, id) {\n\tconst optsHtml = Object.keys(field.options)\n\t\t.sort()\n\t\t.reduce(\n\t\t\t(out, opt) =>\n\t\t\t\tout + `<option value=\"${field.options[opt]}\">${opt}</option>`,\n\t\t\t''\n\t\t);\n\n\treturn `<p><label for=\"${id}\">${\n\t\tfield.label\n\t}</label><select id=\"${id}\" data-bind=\"${\n\t\tfield.bind\n\t}\">${optsHtml}</select></p>`;\n}\n\nfunction setVarFromEl(el, vars) {\n\tswitch (el.nodeName) {\n\t\tcase 'INPUT':\n\t\t\tif (el.getAttribute('type') === 'number') {\n\t\t\t\tvars.set(el.dataset.bind, parseInt(el.value));\n\t\t\t} else {\n\t\t\t\tvars.set(el.dataset.bind, el.value);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'SELECT':\n\t\t\tvars.set(el.dataset.bind, el.options[el.selectedIndex].value);\n\t\t\tbreak;\n\t}\n}\n\nclass StyleTab {\n\tconstructor(tabs, vars) {\n\t\tthis.vars = vars;\n\t\tthis.vars.addListener('config.style.*', () => this.update());\n\t\tthis.pickers = {};\n\t\tthis.el = tabs.add('Style');\n\n\t\t/*\n\t\tCreate HTML for each panel. For color and font fields, we create a\n\t\tplaceholder <div> that we will later in this function create appropriate\n\t\tobjects to attach to.\n\t\t*/\n\n\t\tfields.forEach(panel => {\n\t\t\tconst p = new Panel(\n\t\t\t\tpanel.name,\n\t\t\t\tpanel.fields.reduce((out, field) => {\n\t\t\t\t\tconst id = lodash_kebabcase(panel.name + '-' + field.label);\n\n\t\t\t\t\tswitch (field.type) {\n\t\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tcase 'font':\n\t\t\t\t\t\t\treturn out + pickerHtmlForField(field, id);\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\treturn out + numberHtmlForField(field, id);\n\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\treturn out + selectHtmlForField(field, id);\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Don't know how to build a field of type \"${\n\t\t\t\t\t\t\t\t\tfield.type\n\t\t\t\t\t\t\t\t}\"`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}, '')\n\t\t\t);\n\n\t\t\tp.open = false;\n\t\t\tthis.el.appendChild(p.el);\n\t\t});\n\n\t\t/*\n\t\tCreate picker objects for the placeholders created above.\n\t\t*/\n\n\t\tArray.from(this.el.querySelectorAll('[data-container]')).forEach(\n\t\t\tplaceholder => {\n\t\t\t\tconst bind = placeholder.dataset.toBind;\n\t\t\t\tlet picker;\n\n\t\t\t\tswitch (placeholder.dataset.container) {\n\t\t\t\t\tcase 'color-picker':\n\t\t\t\t\t\tpicker = new ColorPicker(\n\t\t\t\t\t\t\tplaceholder,\n\t\t\t\t\t\t\tplaceholder.dataset.id,\n\t\t\t\t\t\t\tplaceholder.dataset.label,\n\t\t\t\t\t\t\tvalue => this.vars.set(bind, value)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'font-picker':\n\t\t\t\t\t\tpicker = new FontPicker(\n\t\t\t\t\t\t\tplaceholder,\n\t\t\t\t\t\t\tplaceholder.dataset.id,\n\t\t\t\t\t\t\tplaceholder.dataset.label,\n\t\t\t\t\t\t\tvalue => this.vars.set(bind, value)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis.pickers[bind] = this.pickers[bind] || [];\n\t\t\t\tthis.pickers[bind].push(picker);\n\t\t\t}\n\t\t);\n\n\t\t/*\n\t\tAdd event listeners to events on our native fields, e.g. non-picker fields.\n\t\t*/\n\n\t\tthis.el.addEventListener('change', e => {\n\t\t\tconst target = closest(e.target, '[data-bind]', true);\n\n\t\t\tif (target) {\n\t\t\t\tsetVarFromEl(target, this.vars);\n\t\t\t}\n\t\t});\n\n\t\tthis.el.addEventListener('input', e => {\n\t\t\tconst target = closest(e.target, 'input[data-bind]', true);\n\n\t\t\tif (target) {\n\t\t\t\tsetVarFromEl(target, this.vars);\n\t\t\t}\n\t\t});\n\n\t\tthis.configPanel = new Config(vars);\n\t\tthis.el.appendChild(this.configPanel.el);\n\t\tthis.update();\n\t}\n\n\tupdate() {\n\t\t/* Update native fields. */\n\n\t\tArray.from(this.el.querySelectorAll('[data-bind]')).forEach(el => {\n\t\t\tconst varValue = this.vars.get(el.dataset.bind);\n\n\t\t\tswitch (el.nodeName) {\n\t\t\t\tcase 'INPUT':\n\t\t\t\t\tel.value = varValue;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SELECT':\n\t\t\t\t\tArray.from(el.options).forEach((opt, index) => {\n\t\t\t\t\t\tif (opt.value === varValue) {\n\t\t\t\t\t\t\tel.selectedIndex = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t/* Update pickers. */\n\n\t\tObject.keys(this.pickers).forEach(varName => {\n\t\t\tthis.pickers[varName].forEach(p => p.set(this.vars.get(varName)));\n\t\t});\n\n\t\t/* Update the config panel. */\n\n\t\tthis.configPanel.update();\n\t}\n}\n\nclass Tabs {\n\tconstructor() {\n\t\tthis.el = document.createElement('div');\n\t\tthis.tabList = document.createElement('ul');\n\t\tthis.tabList.classList.add('tabs');\n\t\tthis.el.appendChild(this.tabList);\n\t\tthis.tabList.addEventListener('click', e =>\n\t\t\tthis.show(e.target.dataset.tab)\n\t\t);\n\t}\n\n\tadd(name) {\n\t\tconst newTab = document.createElement('li');\n\t\tconst newTabLink = document.createElement('a');\n\t\tconst newContent = document.createElement('div');\n\n\t\tnewTabLink.dataset.tab = name;\n\t\tnewTabLink.setAttribute('href', 'javascript:void(0)');\n\t\tnewTabLink.appendChild(document.createTextNode(name));\n\t\tnewTab.appendChild(newTabLink);\n\t\tnewContent.classList.add('tab-content');\n\t\tnewContent.dataset.tab = name;\n\t\tthis.tabList.append(newTab);\n\t\tthis.el.append(newContent);\n\n\t\tif (this.tabList.children.length === 1) {\n\t\t\tthis.show(name);\n\t\t}\n\n\t\treturn newContent;\n\t}\n\n\tshow(name) {\n\t\tArray.from(this.el.querySelectorAll('[data-tab]')).forEach(t => {\n\t\t\tif ((t.dataset.tab || t.dataset.tabName) === name) {\n\t\t\t\tt.classList.add('active');\n\t\t\t} else {\n\t\t\t\tt.classList.remove('active');\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass Debug {\n\tconstructor() {\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.setAttribute('id', 'cb-debug');\n\t\tthis.tabs = new Tabs();\n\t\tthis.el.appendChild(this.tabs.el);\n\t}\n\n\tactivate() {\n\t\tdocument.body.classList.add('with-debugger');\n\t\tdocument.body.append(this.el);\n\t}\n\n\tdeactivate() {\n\t\tdocument.body.classList.remove('with-debugger');\n\t\tdocument.body.removeChild(this.el);\n\t}\n\n\taddDefaultTabs(vars, view, story, passage) {\n\t\tnew StateTab(this.tabs, vars, view, story, passage);\n\t\tnew StyleTab(this.tabs, vars, view);\n\t}\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$2 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar symbolTag$2 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp = /^\\w*$/;\nvar reLeadingDot = /^\\./;\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\nvar funcProto = Function.prototype;\nvar objectProto$2 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root$2['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto$2.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$2 = objectProto$2.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$2 = root$2.Symbol;\nvar splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root$2, 'Map');\nvar nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined;\nvar symbolToString$2 = symbolProto$2 ? symbolProto$2.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$2(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$2(value)) {\n    return symbolToString$2 ? symbolToString$2.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$2(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString$2(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol$2(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString$2.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$2(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$2(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$2(value) {\n  return value == null ? '' : baseToString$2(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nvar lodash_get = get;\n\n/*\nColor-related functions. Right now this supports either hex triplets or Material\nDesign color keywords that look like `red.500`.\n*/\n\nclass Color {\n\tconstructor(value) {\n\t\tif (value) {\n\t\t\tif (value[0] && value[0] === '#') {\n\t\t\t\tthis.hex = value;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (colors[value]) {\n\t\t\t\tif (Array.isArray(colors[value])) {\n\t\t\t\t\tthis.hex = colors[value][colors[value].length - 1];\n\t\t\t\t} else {\n\t\t\t\t\tthis.hex = colors[value];\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst colorLookup = /^(\\w+)-(\\d)$/.exec(value);\n\n\t\t\tif (colorLookup && colors[colorLookup[1]]) {\n\t\t\t\tthis.hex = colors[colorLookup[1]][colorLookup[2]];\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* Fall back to black. */\n\n\t\tthis.hex = '#000000';\n\t}\n\n\ttoString() {\n\t\treturn this.hex;\n\t}\n}\n\nfunction createFactory() {\n\treturn (...args) => new Color(...args);\n}\n\n/* An author function to render arbitrary code to HTML. */\n\nfunction createFactory$1(parser, renderer) {\n\treturn code => renderer.render(parser.parse(code)).html;\n}\n\n/* Author functions for embedding images. */\n\nclass Image {\n\tconstructor(url) {\n\t\tthis.el = document.createElement('img');\n\t\tthis.url(url);\n\t\tthis.altText('');\n\t\tthis.ratio(16 / 9);\n\t}\n\n\taltText(value) {\n\t\tthis.el.setAttribute('alt', value);\n\t\treturn this;\n\t}\n\n\tplaceholder(color) {\n\t\tthis.el.style.backgroundColor = new Color(color).hex || color;\n\t\treturn this;\n\t}\n\n\turl(value) {\n\t\tthis.imgUrl = () => value;\n\t\treturn this;\n\t}\n\n\tflickr(embedCode) {\n\t\tconst url = /img src=\"(.+?)\"/.exec(embedCode)[1];\n\n\t\tthis.imgUrl = () => url;\n\t\treturn this;\n\t}\n\n\tunsplash(url) {\n\t\tconst id = url.replace(/.*\\//, '');\n\n\t\tthis.imgUrl = () =>\n\t\t\t`https://source.unsplash.com/${id}/${this.width}x${this.height}`;\n\t\treturn this;\n\t}\n\n\tratio(value) {\n\t\tconst pageWidth = document.querySelector('div.page').offsetWidth;\n\n\t\tthis.el.setAttribute('width', pageWidth);\n\t\tthis.el.setAttribute('height', pageWidth * 1 / value);\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tthis.el.setAttribute('src', this.imgUrl());\n\t\treturn this.el.outerHTML;\n\t}\n}\n\nfunction createFactory$2() {\n\treturn (...args) => new Image(...args);\n}\n\n/*\nAuthor functions to allows the player to make choices or enter text.\n*/\n\nclass Input {\n\tconstructor(vars, saveTo) {\n\t\tthis.vars = vars;\n\t\tthis.saveTo = saveTo;\n\t\tthis.type = 'text';\n\t\tthis.required = true;\n\t}\n\n\tchoices(...choices) {\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\tcyclingLink(...choices) {\n\t\tthis.type = 'cyclingLink';\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\tmenu(...choices) {\n\t\tthis.type = 'menu';\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\ttext() {\n\t\tthis.type = 'text';\n\t\treturn this;\n\t}\n\n\trequired() {\n\t\tthis.required = true;\n\t\treturn this;\n\t}\n\n\toptional() {\n\t\tthis.required = false;\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tswitch (this.type) {\n\t\t\tcase 'cyclingLink': {\n\t\t\t\tlet current = this.vars.get(this.saveTo);\n\n\t\t\t\tif (current === undefined) {\n\t\t\t\t\tthis.vars.set(this.saveTo, this.choices[0]);\n\t\t\t\t\tcurrent = this.choices[0];\n\t\t\t\t}\n\n\t\t\t\treturn `<a href=\"javascript:void(0)\" class=\"stationary\" data-cb-save-to=\"${lodash_escape(\n\t\t\t\t\tthis.saveTo\n\t\t\t\t)}\" ${this.required && 'required'} data-cb-cycle=\"${lodash_escape(\n\t\t\t\t\tJSON.stringify(this.choices)\n\t\t\t\t)}\">${current}</a>`;\n\t\t\t}\n\n\t\t\tcase 'menu': {\n\t\t\t\tlet current = this.vars.get(this.saveTo);\n\n\t\t\t\tif (current === undefined) {\n\t\t\t\t\tthis.vars.set(this.saveTo, this.choices[0]);\n\t\t\t\t\tcurrent = this.choices[0];\n\t\t\t\t}\n\n\t\t\t\tconst choiceHtml = this.choices.reduce(\n\t\t\t\t\t(result, choice) =>\n\t\t\t\t\t\tresult +\n\t\t\t\t\t\t`<option value=\"${choice}\" ${current === choice &&\n\t\t\t\t\t\t\t'selected'}>${choice}</option>`,\n\t\t\t\t\t''\n\t\t\t\t);\n\n\t\t\t\treturn `<select data-cb-save-to=\"${lodash_escape(\n\t\t\t\t\tthis.saveTo\n\t\t\t\t)}\">${choiceHtml}</select>`;\n\t\t\t}\n\n\t\t\tcase 'text':\n\t\t\t\treturn `<input type=\"text\" value=\"${lodash_escape(\n\t\t\t\t\tthis.vars.get(this.saveTo)\n\t\t\t\t)}\" ${this.required && 'required'} data-cb-save-to=\"${lodash_escape(\n\t\t\t\t\tthis.saveTo\n\t\t\t\t)}\">`;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`No input type named \"${this.type}\" exists.`);\n\t\t}\n\t}\n\n\tstatic attachTo(el, vars) {\n\t\t/* Cycling links. */\n\n\t\tel.addEventListener('click', e => {\n\t\t\tconst target = closest(\n\t\t\t\te.target,\n\t\t\t\t'a[data-cb-save-to][data-cb-cycle]',\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif (target) {\n\t\t\t\tconst varName = target.dataset.cbSaveTo;\n\t\t\t\tconst choices = JSON.parse(target.dataset.cbCycle);\n\t\t\t\tlet index = choices.indexOf(target.textContent) + 1;\n\n\t\t\t\tif (index === choices.length) {\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\n\t\t\t\tvars.set(varName, choices[index]);\n\t\t\t\ttarget.textContent = choices[index];\n\t\t\t}\n\t\t});\n\n\t\t/* Menus. */\n\n\t\tel.addEventListener('change', e => {\n\t\t\tconst target = closest(e.target, 'select[data-cb-save-to]', true);\n\n\t\t\tif (target) {\n\t\t\t\tvars.set(\n\t\t\t\t\ttarget.dataset.cbSaveTo,\n\t\t\t\t\ttarget.options[target.selectedIndex].value\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t/* Text fields. */\n\n\t\tel.addEventListener('input', e => {\n\t\t\tconst target = closest(\n\t\t\t\te.target,\n\t\t\t\t'input[type=\"text\"][data-cb-save-to]',\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif (target) {\n\t\t\t\tvars.set(target.dataset.cbSaveTo, target.value);\n\t\t\t}\n\t\t});\n\n\t\t/* Validation checking. */\n\n\t\tdocument\n\t\t\t.querySelector('form#cb-validation')\n\t\t\t.addEventListener('submit', e => {\n\t\t\t\tif (Input.validationCallback) {\n\t\t\t\t\tInput.validationCallback();\n\t\t\t\t}\n\n\t\t\t\te.preventDefault();\n\t\t\t});\n\t}\n\n\t/*\n\tTriggers browser validation messages by simulating a click to a hidden\n\tbutton. We have to do it this way because submitting a form directly\n\tbypasses validation.\n\t*/\n\n\tstatic ifAllValid(func) {\n\t\tInput.validationCallback = func;\n\t\tdocument.querySelector('button#cb-validation-tester').click();\n\t}\n}\n\nfunction createFactory$3(vars) {\n\treturn (...args) => new Input(vars, ...args);\n}\n\n/* Author functions for creating links. */\n\nclass Link {\n\tstatic attachTo(el, onClick) {\n\t\tel.addEventListener('click', e => {\n\t\t\tconst target = closest(e.target, '[data-cb-passage]', true);\n\n\t\t\tif (target) {\n\t\t\t\tconst passage = target.dataset.cbPassage;\n\n\t\t\t\tif (passage) {\n\t\t\t\t\tInput.ifAllValid(() => onClick(passage));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(vars, label) {\n\t\tthis.vars = vars;\n\t\tthis.el = document.createElement('a');\n\n\t\tif (label) {\n\t\t\tthis.labelled(label);\n\t\t}\n\t}\n\n\tlabelled(label) {\n\t\tthis.el.innerHTML = '';\n\t\tthis.el.appendChild(document.createTextNode(label));\n\t\treturn this;\n\t}\n\n\tto(target) {\n\t\t/* Does this look like an external link? */\n\n\t\tif (/^\\w+:\\/\\/\\/?\\w/i.test(target)) {\n\t\t\tthis.el.setAttribute('href', target);\n\t\t\tthis.el.dataset.cbPassage = undefined;\n\t\t} else {\n\t\t\tthis.el.setAttribute('href', 'javascript:void(0)');\n\t\t\tthis.el.dataset.cbPassage = target;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tback(count = 1) {\n\t\tconst trail = this.vars.get('trail');\n\n\t\tif (count < trail.length - 1) {\n\t\t\treturn this.to(trail[trail.length - count]);\n\t\t}\n\n\t\treturn this.to(trail[0]);\n\t}\n\n\trestart() {\n\t\tthis.el.dataset.cbPassage = undefined;\n\t\tthis.el.setAttribute('href', 'javascript:restart(true)');\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\treturn this.el.outerHTML;\n\t}\n}\n\nfunction createFactory$4(vars) {\n\treturn (...args) => new Link(vars, ...args);\n}\n\n/**\n * Exports\n */\n\nvar timestring = parseTimestring;\n\n/**\n * Default options to use when parsing a timestring\n *\n * @type {Object}\n */\n\nconst DEFAULT_OPTS = {\n  hoursPerDay: 24,\n  daysPerWeek: 7,\n  weeksPerMonth: 4,\n  monthsPerYear: 12,\n  daysPerYear: 365.25\n};\n\n/**\n * Map of accepted strings to unit\n *\n * @type {Object}\n */\n\nconst UNIT_MAP = {\n  ms: ['ms', 'milli', 'millisecond', 'milliseconds'],\n  s: ['s', 'sec', 'secs', 'second', 'seconds'],\n  m: ['m', 'min', 'mins', 'minute', 'minutes'],\n  h: ['h', 'hr', 'hrs', 'hour', 'hours'],\n  d: ['d', 'day', 'days'],\n  w: ['w', 'week', 'weeks'],\n  mth: ['mon', 'mth', 'mths', 'month', 'months'],\n  y: ['y', 'yr', 'yrs', 'year', 'years']\n};\n\n/**\n * Parse a timestring\n *\n * @param  {String} string\n * @param  {String} returnUnit\n * @param  {Object} opts\n * @return {Number}\n */\n\nfunction parseTimestring (string, returnUnit, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts || {});\n\n  let totalSeconds = 0;\n  let unitValues = getUnitValues(opts);\n  let groups = string\n    .toLowerCase()\n    .replace(/[^.\\w+-]+/g, '')\n    .match(/[-+]?[0-9]+[a-z]+/g);\n\n  if (groups !== null) {\n    groups.forEach(group => {\n      let value = group.match(/[0-9]+/g)[0];\n      let unit = group.match(/[a-z]+/g)[0];\n\n      totalSeconds += getSeconds(value, unit, unitValues);\n    });\n  }\n\n  if (returnUnit) {\n    return convert(totalSeconds, returnUnit, unitValues)\n  }\n\n  return totalSeconds\n}\n\n/**\n * Get unit values based on the passed options\n *\n * @param   {Object} opts\n * @returns {Object}\n */\n\nfunction getUnitValues (opts) {\n  let unitValues = {\n    ms: 0.001,\n    s: 1,\n    m: 60,\n    h: 3600\n  };\n\n  unitValues.d = opts.hoursPerDay * unitValues.h;\n  unitValues.w = opts.daysPerWeek * unitValues.d;\n  unitValues.mth = (opts.daysPerYear / opts.monthsPerYear) * unitValues.d;\n  unitValues.y = opts.daysPerYear * unitValues.d;\n\n  return unitValues\n}\n\n/**\n * Get the key for a unit\n *\n * @param   {String} unit\n * @returns {String}\n */\n\nfunction getUnitKey (unit) {\n  for (let key of Object.keys(UNIT_MAP)) {\n    if (UNIT_MAP[key].indexOf(unit) > -1) {\n      return key\n    }\n  }\n\n  throw new Error(`The unit [${unit}] is not supported by timestring`)\n}\n\n/**\n *  Get the number of seconds for a value, based on the unit\n *\n * @param   {Number} value\n * @param   {String} unit\n * @param   {Object} unitValues\n * @returns {Number}\n */\n\nfunction getSeconds (value, unit, unitValues) {\n  return value * unitValues[getUnitKey(unit)]\n}\n\n/**\n * Convert a value from its existing unit to a new unit\n *\n * @param   {Number} value\n * @param   {String} unit\n * @param   {Object} unitValues\n * @returns {Number}\n */\n\nfunction convert (value, unit, unitValues) {\n  return value / unitValues[getUnitKey(unit)]\n}\n\n/*\nSometimes you'd like to wrap a block of Markdown text in a <div> tag to apply\nsome effect to it... but doing so turns off Markdown paragraphing inside the tag\nbecause Markdown leaves block tags alone. This module wraps each paragraph in\nMarkdown in a <span> for you.\n*/\n\nvar wrap = (markdown, attributes = {}) => {\n\tconst tag =\n\t\t'<span' +\n\t\tObject.keys(attributes).reduce(\n\t\t\t(result, current) => result + ` ${current}=\"${attributes[current]}\"`,\n\t\t\t''\n\t\t) +\n\t\t'>';\n\n\treturn tag + markdown.replace(/[\\r\\n]{2,}/g, `</span>$&${tag}`) + '</span>';\n};\n\n/*\nCauses text to appear after a delay.\n*/\n\nclass After {\n\tsetup(invocation) {\n\t\tthis.delay = timestring(invocation.replace(/^after\\s/i, ''), 'ms');\n\t}\n\n\tprocess(output) {\n\t\toutput.text = wrap(output.text, {\n\t\t\tclass: 'fade-in',\n\t\t\tstyle: `animation-delay: ${this.delay}ms`\n\t\t});\n\t}\n}\n\nAfter.regexps = [/^after\\s/i];\n\n/*\nCauses text to appear in the same paragraph as the one preceding it.\n*/\n\nclass Append {\n\tsetup() {}\n\n\tprocess(output) {\n\t\toutput.beforeText = ' ';\n\t}\n}\n\nAppend.regexps = [/^append$/i];\n\n/*\nHandles if, unless, and else modifiers.\n*/\n\nclass Conditionals {\n\tsetup(invocation) {\n\t\tthis.type = invocation.replace(/\\s.*/, '').toLowerCase();\n\n\t\tif (this.type !== 'else') {\n\t\t\tthis.condition = new Function(\n\t\t\t\t'return ' + invocation.replace(/.*?\\s/, '')\n\t\t\t);\n\t\t}\n\t}\n\n\tprocess(output, opts) {\n\t\tswitch (this.type) {\n\t\t\tcase 'if':\n\t\t\t\tthis.conditionEval = this.condition.apply(window);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unless':\n\t\t\t\tthis.conditionEval = !this.condition.apply(window);\n\t\t\t\tbreak;\n\n\t\t\tcase 'else':\n\t\t\t\tif (!this.condition) {\n\t\t\t\t\topts.addError(\n\t\t\t\t\t\t'There was no matching if modifier for an else modifier.'\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.conditionEval = !this.conditionEval;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!this.conditionEval) {\n\t\t\toutput.text = '';\n\t\t\toutput.beforeText = '';\n\t\t\toutput.afterText = '';\n\t\t}\n\t}\n}\n\nConditionals.regexps = [/^if\\s/i, /^unless\\s/i, /^else$/i];\n\n/*\nA no-op modifier used to reset other modifiers.\n*/\n\nclass Continue {\n\tsetup() {}\n\tprocess() {}\n}\n\nContinue.regexps = [/^continued$/i, /^continue$/i, /^cont'd$/i, /^cont$/i];\n\nvar Modifiers = {\n\taddBuiltins(renderer) {\n\t\trenderer.addModifier('after', After);\n\t\trenderer.addModifier('append', Append);\n\t\trenderer.addModifier('conditionals', Conditionals);\n\t\trenderer.addModifier('continue', Continue);\n\t}\n};\n\nvar splitLines = function (str, opts) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string in the first argument, got ' + typeof str);\n\t}\n\n\tvar preserveNewlines = opts && opts.preserveNewlines;\n\n\tif (!preserveNewlines) {\n\t\treturn str.split(/\\r?\\n/);\n\t}\n\n\tvar parts = str.split(/(\\r?\\n)/);\n\tvar lines = [];\n\n\tfor (var i = 0; i < parts.length; i += 2) {\n\t\tlines.push(parts[i] + (parts[i + 1] || ''));\n\t}\n\n\treturn lines;\n};\n\n/*\nThis is a template parser that processes text in a specific format:\n\n1. An optional vars section that looks like this:\n\n\tprop: value\n\tprop: value\n\t--\n\n2. Then, a series of a mixture of plain text blocks and modifiers. Modifiers\n   exist on a single line that begins and ends with [ and ]. They affect the\n   following text block *only*. Text blocks are all other text.\n\n   Modifiers can be joined on a single line by placing a semicolon between them,\n   e.g. [modifier 1; modifier 2]\n*/\n\nclass Parser {\n\tconstructor(opts = {}) {\n\t\t/*\n\t\tIf true, logs information to the console as it parses.\n\t\t*/\n\t\tthis.verbose = false;\n\n\t\t/*\n\t\tThe regexp matching the end of a vars section of source code.\n\t\t*/\n\t\tthis.varsSep = /^--$/m;\n\n\t\t/*\n\t\tThe regexp matching a modifier block.\n\t\t*/\n\t\tthis.modifierPattern = /^\\[([^[].+[^\\]])\\]$/gm;\n\n\t\tObject.assign(this, opts);\n\t}\n\n\t/*\n\tParses a source string into a structured object:\n\t\tvars: a key => value structure\n\t\tblocks: an array of {type, content} blocks\n\t\twarnings: an array of warning strings\n\t*/\n\tparse(src) {\n\t\tlet result = {\n\t\t\tvars: {},\n\t\t\tblocks: [],\n\t\t\twarnings: []\n\t\t};\n\n\t\t/* Does the source start with a vars section? */\n\n\t\tlet varsBits = src.split(this.varsSep, 2);\n\t\tlet vars, text;\n\n\t\tif (varsBits.length === 2) {\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log('vars section detected');\n\t\t\t}\n\n\t\t\t[vars, text] = varsBits;\n\n\t\t\tsplitLines(vars).forEach(line => {\n\t\t\t\tif (line.trim() === '') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst firstColon = line.indexOf(':');\n\n\t\t\t\tif (firstColon !== -1) {\n\t\t\t\t\tconst name = line.substr(0, firstColon).trim();\n\t\t\t\t\tconst value = line.substr(firstColon + 1).trim();\n\n\t\t\t\t\tif (result.vars[name] !== undefined) {\n\t\t\t\t\t\tresult.warnings.push(\n\t\t\t\t\t\t\t`The property \"${name}\" was defined more than once; using the last value.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\tconsole.log(`Setting prop \"${name}\" to \"${value}\"`);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.vars[name] = value;\n\t\t\t\t} else {\n\t\t\t\t\tresult.warnings.push(\n\t\t\t\t\t\t`The line \"${line}\" in the properties section is missing a colon. It was ignored.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log('No vars section detected');\n\t\t\t}\n\n\t\t\ttext = varsBits[0];\n\t\t}\n\n\t\t/*\n\t\tScan the text for modifiers. They always begin immediately with a\n\t\tbracket. Because of the /g flag on the modifier pattern, successive\n\t\truns of exec() match each instance.\n\t\t*/\n\n\t\tconst addBlock = (type, content) => {\n\t\t\tconst trimmedContent = content.trim();\n\n\t\t\tif (trimmedContent === '') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Creating '${type}' block with content: \"${trimmedContent}\"`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tresult.blocks.push({type, content: trimmedContent});\n\t\t};\n\n\t\tconst modifierPat = new RegExp(this.modifierPattern);\n\t\tlet searchIndex = 0;\n\t\tlet modifierMatch = modifierPat.exec(text);\n\n\t\twhile (modifierMatch) {\n\t\t\taddBlock('text', text.substring(searchIndex, modifierMatch.index));\n\n\t\t\t/*\n\t\t\tScan the modifier content for semicolons not inside quotation marks.\n\t\t\tWe cannot allow single quotes here because we allow modifiers such\n\t\t\tas \"cont'd\".\n\t\t\t*/\n\n\t\t\tconst modifierSrc = modifierMatch[1];\n\t\t\tlet modifier = '';\n\n\t\t\tfor (let i = 0; i < modifierSrc.length; i++) {\n\t\t\t\tswitch (modifierSrc[i]) {\n\t\t\t\t\tcase '\"':\n\t\t\t\t\t\t/* Scan ahead. */\n\n\t\t\t\t\t\tmodifier += '\"';\n\n\t\t\t\t\t\tfor (i = i + 1; i < modifierSrc.length; i++) {\n\t\t\t\t\t\t\tmodifier += modifierSrc[i];\n\n\t\t\t\t\t\t\tif (modifierSrc[i] === '\"' && modifierSrc[i - 1] !== '\\\\') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\taddBlock('modifier', modifier);\n\t\t\t\t\t\tmodifier = '';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodifier += modifierSrc[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddBlock('modifier', modifier);\n\t\t\tsearchIndex = modifierPat.lastIndex;\n\t\t\tmodifierMatch = modifierPat.exec(text);\n\t\t}\n\n\t\t/*\n\t\tWe've finished parsing modifiers; put any remaining text into a final\n\t\tblock.\n\t\t*/\n\n\t\taddBlock('text', text.substring(searchIndex));\n\t\treturn result;\n\t}\n}\n\n/*\nA class to manage a passage as published from Twine.\n*/\n\nclass Passage {\n\tconstructor() {\n\t\tthis.tags = [];\n\t}\n\n\tloadFromHtml(el) {\n\t\tconst tagAttr = el.getAttribute('tags');\n\n\t\tthis.name = el.getAttribute('name');\n\t\tthis.id = parseInt(el.getAttribute('pid'));\n\n\t\tif (tagAttr) {\n\t\t\tthis.tags = tagAttr.split(' ');\n\t\t}\n\n\t\tthis.source = el.textContent;\n\t}\n}\n\n/* Author functions for working with passages. */\n\nclass RenderablePassage extends Passage {\n\tconstructor(passage, parser, renderer) {\n\t\tsuper();\n\t\t['id', 'name', 'source', 'tags'].forEach(i => (this[i] = passage[i]));\n\t\tthis.parser = parser;\n\t\tthis.renderer = renderer;\n\t}\n\n\ttoString() {\n\t\treturn this.renderer.render(this.parser.parse(this.source)).html;\n\t}\n}\n\nfunction createFactory$5(story, parser, renderer) {\n\treturn passageName =>\n\t\tnew RenderablePassage(story.passage(passageName), parser, renderer);\n}\n\nvar alea = createCommonjsModule(function (module) {\n// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xor128 = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xorwow = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xorshift7 = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xor4096 = createCommonjsModule(function (module) {\n// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  commonjsGlobal,                                     // window object or global\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar tychei = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar empty = {};\n\n\nvar empty$1 = Object.freeze({\n\tdefault: empty\n});\n\nvar require$$0 = ( empty$1 && empty ) || empty$1;\n\nvar seedrandom = createCommonjsModule(function (module) {\n/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; };\n  prng.quick = function() { return arc4.g(4) / 0x100000000; };\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); };\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif (('object') == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require$$0;\n  } catch (ex) {}\n} else if ((typeof undefined) == 'function' && undefined.amd) {\n  undefined(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n});\n\n// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\n\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\n\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\n\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\n\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\n\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\n\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\n\n\nseedrandom.alea = alea;\nseedrandom.xor128 = xor128;\nseedrandom.xorwow = xorwow;\nseedrandom.xorshift7 = xorshift7;\nseedrandom.xor4096 = xor4096;\nseedrandom.tychei = tychei;\n\nvar seedrandom$2 = seedrandom;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$3 = 1 / 0;\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar MAX_INTEGER = 1.7976931348623157e+308;\nvar NAN = 0 / 0;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\nvar funcTag$1 = '[object Function]';\nvar genTag$1 = '[object GeneratorFunction]';\nvar mapTag = '[object Map]';\nvar objectTag = '[object Object]';\nvar promiseTag = '[object Promise]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar symbolTag$3 = '[object Symbol]';\nvar weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar$1 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor$1 = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20f0';\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo$1 = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']';\nvar rsFitz$1 = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')';\nvar rsNonAstral$1 = '[^' + rsAstralRange$1 + ']';\nvar rsRegional$1 = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair$1 = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod$1 = rsModifier$1 + '?';\nvar rsOptVar$1 = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*';\nvar rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1;\nvar rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$1 + '?', rsCombo$1, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboMarksRange$1 + rsComboSymbolsRange$1 + rsVarRange$1 + ']');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$1(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject$1(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `iterator` to an array.\n *\n * @private\n * @param {Object} iterator The iterator to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction iteratorToArray(iterator) {\n  var data,\n      result = [];\n\n  while (!(data = iterator.next()).done) {\n    result.push(data.value);\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar funcProto$1 = Function.prototype;\nvar objectProto$3 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData$1 = root$3['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey$1 = (function() {\n  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$1 = funcProto$1.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$3.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$3 = objectProto$3.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative$1 = RegExp('^' +\n  funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar$1, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$3 = root$3.Symbol;\nvar iteratorSymbol = Symbol$3 ? Symbol$3.iterator : undefined;\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor;\nvar nativeKeys = overArg(Object.keys, Object);\nvar nativeRandom = Math.random;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative$1(root$3, 'DataView');\nvar Map$1 = getNative$1(root$3, 'Map');\nvar Promise = getNative$1(root$3, 'Promise');\nvar Set = getNative$1(root$3, 'Set');\nvar WeakMap = getNative$1(root$3, 'WeakMap');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource$1(DataView);\nvar mapCtorString = toSource$1(Map$1);\nvar promiseCtorString = toSource$1(Promise);\nvar setCtorString = toSource$1(Set);\nvar weakMapCtorString = toSource$1(WeakMap);\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray$1(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString$3.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative$1(value) {\n  if (!isObject$1(value) || isMasked$1(value)) {\n    return false;\n  }\n  var pattern = (isFunction$1(value) || isHostObject$1(value)) ? reIsNative$1 : reIsHostCtor$1;\n  return pattern.test(toSource$1(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$1.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative$1(object, key) {\n  var value = getValue$1(object, key);\n  return baseIsNative$1(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map$1 && getTag(new Map$1) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString$3.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource$1(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject$1(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq$1(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked$1(func) {\n  return !!maskSrcKey$1 && (maskSrcKey$1 in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$3;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource$1(func) {\n  if (func != null) {\n    try {\n      return funcToString$1.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Gets `n` random elements at unique keys from `collection` up to the\n * size of `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @param {number} [n=1] The number of elements to sample.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the random elements.\n * @example\n *\n * _.sampleSize([1, 2, 3], 2);\n * // => [3, 1]\n *\n * _.sampleSize([1, 2, 3], 4);\n * // => [2, 3, 1]\n */\nfunction sampleSize(collection, n, guard) {\n  var index = -1,\n      result = toArray(collection),\n      length = result.length,\n      lastIndex = length - 1;\n\n  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = baseClamp(toInteger(n), 0, length);\n  }\n  while (++index < n) {\n    var rand = baseRandom(index, lastIndex),\n        value = result[rand];\n\n    result[rand] = result[index];\n    result[index] = value;\n  }\n  result.length = n;\n  return result;\n}\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  return sampleSize(collection, MAX_ARRAY_LENGTH);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq$1(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString$3.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray$1 = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction$1(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike$3(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction$1(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject$1(value) ? objectToString$3.call(value) : '';\n  return tag == funcTag$1 || tag == genTag$1;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$1(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$3(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray$1(value) && isObjectLike$3(value) && objectToString$3.call(value) == stringTag);\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$3(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$3(value) && objectToString$3.call(value) == symbolTag$3);\n}\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (iteratorSymbol && value[iteratorSymbol]) {\n    return iteratorToArray(value[iteratorSymbol]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY$3 || value === -INFINITY$3) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol$3(value)) {\n    return NAN;\n  }\n  if (isObject$1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$1(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object ? baseValues(object, keys(object)) : [];\n}\n\nvar lodash_shuffle = shuffle;\n\n/* Author unctions for random behavior. */\n\nclass Random {\n\tconstructor(seed) {\n\t\tthis.rng = seedrandom$2(seed);\n\t}\n\n\t/*\n\tSeeds the random number generator so that subsequent calls are predictable.\n\tUseful for testing.\n\t*/\n\n\tseed(value) {\n\t\tthis.rng = seedrandom$2(value);\n\t}\n\n\t/*\n\tReturns either true or false, randomly.\n\t*/\n\n\tcoinFlip() {\n\t\treturn this.rng() > 0.5;\n\t}\n\n\t/*\n\tReturns a set of simulated die rolls. See\n\thttps://en.wikipedia.org/wiki/Dice_notation for an explanation of the format\n\tthis accepts.\n\t*/\n\n\troll(spec) {\n\t\tconst bits = spec.split(/d/i);\n\n\t\tif (bits.length !== 2) {\n\t\t\tthrow new Error(\n\t\t\t\t'A roll must in the format [number of rolls]d[number of sides], i.e. 1d4.'\n\t\t\t);\n\t\t}\n\n\t\tconst rolls = parseInt(bits[0]);\n\n\t\tif (isNaN(rolls)) {\n\t\t\tthrow new Error(\n\t\t\t\t`The number of rolls specified (${bits[0]}) isn't a number.`\n\t\t\t);\n\t\t}\n\n\t\tconst sides = parseInt(bits[1]);\n\n\t\tif (isNaN(sides)) {\n\t\t\tthrow new Error(\n\t\t\t\t`The number of die sides specified (${bits[1]}) isn't a number.`\n\t\t\t);\n\t\t}\n\n\t\tlet total = 0;\n\n\t\tfor (let i = 0; i < rolls; i++) {\n\t\t\ttotal += 1 + Math.round(this.rng() * (sides - 1));\n\t\t}\n\n\t\treturn total;\n\t}\n\n\t/*\n\tIf only one argument is passed and it is an array:\n\t\tReturns a randomly chosen item in the array.\n\tOtherwise:\n\t\tReturns a randomly chosen argument.\n\t*/\n\n\tchoice(...choices) {\n\t\tlet toChooseFrom = choices;\n\n\t\tif (choices.length === 1 && Array.isArray(choices[0])) {\n\t\t\ttoChooseFrom = choices[0];\n\t\t}\n\n\t\treturn toChooseFrom[Math.round(this.rng() * (toChooseFrom.length - 1))];\n\t}\n\n\t/*\n\tIf only one argument is passed and it is an array:\n\t\tReturns a copy of the array, but with items are in random order.\n\tOtherwise:\n\t\tReturns the arguments passed in random order.\n\t*/\n\n\tshuffle(...items) {\n\t\tlet toShuffle = items;\n\n\t\tif (items.length === 1 && Array.isArray(items[0])) {\n\t\t\ttoShuffle = items[0];\n\t\t}\n\n\t\treturn lodash_shuffle(toShuffle.slice());\n\t}\n}\n\nvar marked = createCommonjsModule(function (module, exports) {\n/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)([\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(\n          cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1])\n        );\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return '';\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[^]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[^]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nbaseUrls = {};\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false,\n  baseUrl: null\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\n{\n  module.exports = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : commonjsGlobal);\n}());\n});\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$4 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag$4 = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g;\nvar reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/** Used to map HTML entities to characters. */\nvar htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n  '&#96;': '`'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$4 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$4 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$4 = freeGlobal$4 || freeSelf$4 || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf$2(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.unescape` to convert HTML entities to characters.\n *\n * @private\n * @param {string} chr The matched character to unescape.\n * @returns {string} Returns the unescaped character.\n */\nvar unescapeHtmlChar = basePropertyOf$2(htmlUnescapes);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$4 = objectProto$4.toString;\n\n/** Built-in value references. */\nvar Symbol$4 = root$4.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$3 = Symbol$4 ? Symbol$4.prototype : undefined;\nvar symbolToString$3 = symbolProto$3 ? symbolProto$3.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$3(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$4(value)) {\n    return symbolToString$3 ? symbolToString$3.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$4) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$4(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$4(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$4(value) && objectToString$4.call(value) == symbolTag$4);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$3(value) {\n  return value == null ? '' : baseToString$3(value);\n}\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nfunction unescape(string) {\n  string = toString$3(string);\n  return (string && reHasEscapedHtml.test(string))\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\n    : string;\n}\n\nvar lodash_unescape = unescape;\n\n/*\nA custom renderer for Marked that, instead of outputting code blocks, evaluates\nthem, and outputs small caps instead of strikethrough text.\n*/\n\nlet renderer = new marked.Renderer();\n\n/* Evaluate code blocks without outputting anything. */\n\nrenderer.code = src => {\n\ttry {\n\t\tconst func = new Function(lodash_unescape(src));\n\n\t\tfunc.apply(window);\n\t} catch (e) {\n\t\tlet detail;\n\n\t\tif (e.error && e.error.stack) {\n\t\t\tdetail = e.error.stack;\n\t\t} else {\n\t\t\tdetail = e.message + '\\n[No stack trace available]';\n\t\t}\n\n\t\tif (renderer.errors) {\n\t\t\trenderer.errors.push(\n\t\t\t\t`An error occurred while evaluating <code>${src}</code>.<br><pre>${detail}</pre>`\n\t\t\t);\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\treturn '';\n};\n\n/*\nEvaluate code spans, and if they end up having a non-null or undefined result,\noutput it.\n*/\n\nrenderer.codespan = src => {\n\ttry {\n\t\tconst func = new Function(`return (${lodash_unescape(src)})`);\n\t\tconst result = func.apply(window);\n\n\t\tif (result !== null && result !== undefined) {\n\t\t\treturn result.toString();\n\t\t}\n\t} catch (e) {\n\t\tif (renderer.errors) {\n\t\t\trenderer.errors.push(\n\t\t\t\t`An error occurred while evaluating <code>${src}</code> (${e.message}).`\n\t\t\t);\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\n\t\treturn '';\n\t}\n};\n\nrenderer.del = src => {\n\treturn `<span class=\"small-caps\">${src}</span>`;\n};\n\nfunction linkParser(source, vars) {\n\tlet result = source;\n\n\t/* [[links]] */\n\n\tresult = result.replace(/\\[\\[(.*?)\\]\\]/g, (match, target) => {\n\t\tlet label = target;\n\n\t\t/* display|target format */\n\n\t\tconst barIndex = target.indexOf('|');\n\n\t\tif (barIndex !== -1) {\n\t\t\tlabel = target.substr(0, barIndex);\n\t\t\ttarget = target.substr(barIndex + 1);\n\t\t} else {\n\t\t\t/* display->target format */\n\n\t\t\tconst rightArrIndex = target.indexOf('->');\n\n\t\t\tif (rightArrIndex !== -1) {\n\t\t\t\tlabel = target.substr(0, rightArrIndex);\n\t\t\t\ttarget = target.substr(rightArrIndex + 2);\n\t\t\t} else {\n\t\t\t\t/* target<-display format */\n\n\t\t\t\tconst leftArrIndex = target.indexOf('<-');\n\n\t\t\t\tif (leftArrIndex !== -1) {\n\t\t\t\t\tlabel = target.substr(leftArrIndex + 2);\n\t\t\t\t\ttarget = target.substr(0, leftArrIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Link(vars, label).to(target).toString();\n\t});\n\n\treturn result;\n}\n\n/*\nThis \"renders\" a template as parsed by the `parser` module. It actually does\nmore than render it to HTML, as templates have side effects (e.g. changing\nvariables).\n*/\n\nclass Renderer {\n\tconstructor(vars, alarm, opts = {}) {\n\t\t/*\n\t\tIf true, logs information to the console as it renders.\n\t\t*/\n\t\tthis.verbose = false;\n\n\t\t/*\n\t\tActive modifiers.\n\t\t*/\n\t\tthis.modifiers = [];\n\n\t\t/*\n\t\tOptions passed to the `marked` module in the `toHtml()` function.\n\t\t*/\n\n\t\tthis.markedOptions = {\n\t\t\trenderer: renderer,\n\t\t\tsmartypants: true\n\t\t};\n\n\t\tObject.assign(this, opts);\n\t\tthis.vars = vars;\n\t\tthis.alarm = alarm;\n\t}\n\n\t/*\n\tAdds a modifier class to the rendering process. During each render, a new\n\tinstance of the modifier will be created. This is to allow a modifier to\n\tremember state between invocations.\n\t*/\n\n\taddModifier(name, modifier) {\n\t\t/* Check for repeats. */\n\n\t\tif (this.modifiers.some(m => m.name === name)) {\n\t\t\tthrow new Error(\n\t\t\t\t`A modifier named \"${name}\" has already been added to this renderer.`\n\t\t\t);\n\t\t}\n\n\t\tif (!modifier.regexps || !modifier.regexps.length) {\n\t\t\tthrow new Error(`A modifier must have a static regexps property.`);\n\t\t}\n\n\t\tmodifier.regexps.forEach(regexp =>\n\t\t\tthis.modifiers.push({name, regexp, modifier})\n\t\t);\n\t}\n\n\t/*\n\tRemoves a modifier class from the rendering process.\n\t*/\n\n\tremoveModifier(name) {\n\t\tconst oldLen = this.modifiers.length;\n\n\t\tthis.modifiers = this.modifiers.filter(m => m.name !== name);\n\n\t\tif (this.modifiers.length === oldLen) {\n\t\t\tthrow new Error(\n\t\t\t\t`A modifier named \"${name}\" does not exist in this renderer.`\n\t\t\t);\n\t\t}\n\t}\n\n\t/*\n\tAs a final step, the text blocks concatenated are run through this function\n\tto convert the source to HTML. By default, this runs the text through\n\t`marked`.\n\t*/\n\n\ttoHtml(source, errors, warnings) {\n\t\tthis.markedOptions.renderer.warnings = warnings;\n\t\tthis.markedOptions.renderer.errors = errors;\n\t\tmarked.setOptions(this.markedOptions);\n\t\treturn marked(source);\n\t}\n\n\t/*\n\tThe main render process. Returns an object with markdown, html, warnings,\n\tand errors properties.\n\t*/\n\n\trender(parsed) {\n\t\tlet output = {\n\t\t\tmarkdown: '',\n\t\t\thtml: '',\n\t\t\twarnings: parsed.warnings || [],\n\t\t\terrors: parsed.errors || []\n\t\t};\n\n\t\t/*\n\t\tSet global variables as denoted by properties.\n\t\t*/\n\n\t\tif (parsed.vars) {\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log(`Setting vars...`, parsed.vars);\n\t\t\t}\n\n\t\t\tObject.keys(parsed.vars).forEach(name => {\n\t\t\t\tif (this.verbose) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.log(`Setting var \"${name}\"`);\n\t\t\t\t}\n\n\t\t\t\tthis.vars.set(name, new Function('return ' + parsed.vars[name])());\n\t\t\t});\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn('Renderer was given an object with no vars');\n\t\t}\n\n\t\t/*\n\t\tParse the blocks in sequence.\n\t\t*/\n\n\t\tlet activeModifiers = [];\n\t\tlet modifierInstances = {};\n\n\t\t/*\n\t\tTiny functions we give to active modifiers to allow adding warnings and\n\t\terrors.\n\t\t*/\n\n\t\tconst modifierOpts = {\n\t\t\taddWarning(message) {\n\t\t\t\toutput.warnings.push(message);\n\t\t\t},\n\t\t\taddError(message) {\n\t\t\t\toutput.errors.push(message);\n\t\t\t}\n\t\t};\n\n\t\tif (parsed.blocks) {\n\t\t\tparsed.blocks.forEach(block => {\n\t\t\t\tswitch (block.type) {\n\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tWe allow modifiers to change the text, as well as add\n\t\t\t\t\t\ttext before or after it. We allow this separation to\n\t\t\t\t\t\tkeep the original text intact.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tlet blockOutput = {\n\t\t\t\t\t\t\ttext: linkParser(block.content, this.vars),\n\t\t\t\t\t\t\tbeforeText: '\\n\\n',\n\t\t\t\t\t\t\tafterText: ''\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tAllow all active modifiers to alter the text, then clear\n\t\t\t\t\t\tthem so that the next set of modifiers will start with a\n\t\t\t\t\t\tclean slate.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`Running ${activeModifiers.length} modifiers on text block...`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tactiveModifiers.forEach(m => {\n\t\t\t\t\t\t\t\tm.process(blockOutput, modifierOpts);\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\t\tconsole.table(blockOutput);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactiveModifiers.forEach(m =>\n\t\t\t\t\t\t\t\tm.process(blockOutput, modifierOpts)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.markdown +=\n\t\t\t\t\t\t\tblockOutput.beforeText + blockOutput.text + blockOutput.afterText;\n\t\t\t\t\t\tactiveModifiers = [];\n\n\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\tconsole.log(`Output after modifiers:`);\n\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\tconsole.table(blockOutput);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'modifier': {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tFind all modifiers whose regexp matches this one's.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tconst mods = this.modifiers.filter(m =>\n\t\t\t\t\t\t\tm.regexp.test(block.content)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (mods.length === 1) {\n\t\t\t\t\t\t\tconst mod = mods[0];\n\n\t\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t`Activated \"${mod.name}\" modifier matching [${block.content}]`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!modifierInstances[mod.name]) {\n\t\t\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t\t`Creating new instance of \"${mod.name}\" modifier`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tmodifierInstances[mod.name] = new mod.modifier();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodifierInstances[mod.name].setup(block.content);\n\t\t\t\t\t\t\tactiveModifiers.push(modifierInstances[mod.name]);\n\t\t\t\t\t\t} else if (mods.length === 0) {\n\t\t\t\t\t\t\toutput.warnings.push(\n\t\t\t\t\t\t\t\t`No modifiers matched \"[${block.content}]\". It was ignored.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput.warnings.push(\n\t\t\t\t\t\t\t\t`More than one modifier matched \"[${\n\t\t\t\t\t\t\t\t\tblock.content\n\t\t\t\t\t\t\t\t}]\". It was ignored.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Don't know how to render a block with type \"${block.type}\".`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn('Renderer was given an object with no blocks');\n\t\t}\n\n\t\toutput.html = this.toHtml(output.markdown, output.errors, output.warnings);\n\t\tthis.alarm.update(output.errors, output.warnings);\n\t\treturn output;\n\t}\n}\n\nconst positions = ['left', 'center', 'right'];\n\nclass SideMatter {\n\tconstructor(el, render, vars) {\n\t\tthis.el = el;\n\t\tthis.render = render;\n\n\t\tpositions.forEach(pos => {\n\t\t\tconst posEl = document.createElement('span');\n\n\t\t\tposEl.className = pos;\n\t\t\tthis.el.appendChild(posEl);\n\t\t\tthis[pos + 'El'] = posEl;\n\t\t\tthis[pos] = '';\n\t\t});\n\n\t\tvars.addListener('*', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tupdate() {\n\t\tlet hasContent = false;\n\n\t\tpositions.forEach(pos => {\n\t\t\tconst content = this.render(this[pos]);\n\n\t\t\tthis[pos + 'El'].innerHTML = content;\n\n\t\t\tif (content) {\n\t\t\t\thasContent = true;\n\t\t\t}\n\t\t});\n\n\t\tif (hasContent) {\n\t\t\tthis.el.classList.add('has-content');\n\t\t} else {\n\t\t\tthis.el.classList.remove('has-content');\n\t\t}\n\t}\n}\n\n/*\nA class to manage the story as published from Twine.\n*/\n\nclass Story {\n\tconstructor(view, parser, renderer) {\n\t\tthis.view = view;\n\t\tthis.parser = parser;\n\t\tthis.renderer = renderer;\n\t\tthis.passages = [];\n\t\tthis.customScripts = [];\n\t\tthis.customStyles = [];\n\t}\n\n\t/*\n\tLoads all data from a <tw-storydata> DOM element.\n\t*/\n\n\tloadFromHtml(el) {\n\t\t/* Basic attributes. */\n\n\t\t['name', 'creator', 'ifid', 'options'].forEach(\n\t\t\tattr => (this[attr] = el.getAttribute(attr))\n\t\t);\n\n\t\t/* Camel-case creator version and start node. */\n\n\t\tthis.startNode = parseInt(el.getAttribute('startnode'));\n\t\tthis.creatorVersion = el.getAttribute('creator-version');\n\n\t\t/* Load custom script and styles. */\n\n\t\tconst elsToContents = els => Array.from(els).map(el => el.textContent);\n\n\t\tthis.customScripts = elsToContents(\n\t\t\tel.querySelectorAll('[type=\"text/twine-javascript\"]')\n\t\t);\n\t\tthis.customStyles = elsToContents(\n\t\t\tel.querySelectorAll('[type=\"text/twine-css\"]')\n\t\t);\n\n\t\t/* Create passages. */\n\n\t\tthis.passages = Array.from(el.querySelectorAll('tw-passagedata')).map(\n\t\t\tel => {\n\t\t\t\tlet p = new Passage();\n\n\t\t\t\tp.loadFromHtml(el);\n\t\t\t\treturn p;\n\t\t\t}\n\t\t);\n\t}\n\n\tpassage(name) {\n\t\treturn this.passages.find(p => p.name === name);\n\t}\n}\n\n/*\nLoads a Google font embed.\n*/\n\nlet el;\n\nfunction googleFont(src) {\n\tif (!el) {\n\t\tel = document.createElement('div');\n\t\tdocument.body.appendChild(el);\n\t}\n\n\tel.innerHTML = src;\n}\n\nfunction linkStyles(rules, type, lineColor) {\n\tswitch (type) {\n\t\tcase 'bold':\n\t\t\tObject.assign(rules, {\n\t\t\t\t'text-decoration': 'none',\n\t\t\t\t'font-weight': 'bold'\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'italic':\n\t\t\tObject.assign(rules, {\n\t\t\t\t'text-decoration': 'none',\n\t\t\t\t'font-style': 'italic'\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'none':\n\t\t\trules['text-decoration'] = 'none';\n\t\t\tbreak;\n\n\t\tcase 'small caps':\n\t\t\tObject.assign(rules, {\n\t\t\t\t'text-decoration': 'none',\n\t\t\t\t'text-transform': 'uppercase',\n\t\t\t\t'font-size': '70%',\n\t\t\t\t'letter-spacing': '0.075em'\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'underline':\n\t\t\t/*\n\t\t\tWe rely on links receiving an underline by default.\n\t\t\t*/\n\n\t\t\tObject.assign(rules, {\n\t\t\t\t'text-decoration-color': lineColor\n\t\t\t});\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`No link style named \"${type}\" exists.`);\n\t}\n}\n\n/*\nA lightweight JavaScript interface for adding stylesheets to the DOM. Its main\ninterface is its rules property, which stores selector => rules pairs. For\nexample:\n\nthis.rules['body p'] = {color: 'red', 'font-size': 18};\n\nThis creates CSS rules as-is; you must use the key 'font-size', not fontSize.\n*/\n\nclass Stylesheet {\n\tconstructor(rules = {}) {\n\t\tthis.el = document.createElement('style');\n\t\tdocument.head.appendChild(this.el);\n\t\tthis.rules = rules;\n\t}\n\n\t/*\n\tCoerces a number to a pixel value.\n\t*/\n\n\tautopx(value) {\n\t\treturn typeof value === 'number' ? value + 'px' : value;\n\t}\n\n\t/*\n\tUpdates the DOM <style> element to reflect the rules property.\n\t*/\n\n\tupdate() {\n\t\tfunction cssify(selector, props) {\n\t\t\treturn (\n\t\t\t\tselector +\n\t\t\t\t'{' +\n\t\t\t\tObject.keys(props).reduce(\n\t\t\t\t\t(result, current) => result + current + ':' + props[current] + ';',\n\t\t\t\t\t''\n\t\t\t\t) +\n\t\t\t\t'}'\n\t\t\t);\n\t\t}\n\n\t\tthis.el.innerHTML = Object.keys(this.rules).reduce(\n\t\t\t(result, rule) => result + cssify(rule, this.rules[rule]),\n\t\t\t''\n\t\t);\n\t}\n\n\t/*\n\tRemoves the stylesheet from the DOM.\n\t*/\n\n\tdetach() {\n\t\tdocument.head.removeChild(this.el);\n\t}\n}\n\n/*\nA singleton that updates the appearance of elements onscreen.\n*/\n\nlet vars$1;\nlet style;\n\nfunction updateStyle() {\n\tif (vars$1.get('config.style.googleFont')) {\n\t\tgoogleFont(vars$1.get('config.style.googleFont'));\n\t}\n\n\tif (!style) {\n\t\tstyle = new Stylesheet();\n\t}\n\n\tfunction hex(key) {\n\t\treturn new Color(vars$1.get(key)).hex;\n\t}\n\n\tconst {color, autopx} = style;\n\n\tstyle.rules = {\n\t\tbody: {\n\t\t\t'background-color': hex('config.style.backdrop')\n\t\t},\n\t\t'.page': {\n\t\t\t'background-color': hex('config.style.bg'),\n\t\t\tcolor: hex('config.style.fg'),\n\t\t\t'font-family': vars$1.get('config.style.font'),\n\t\t\t'font-size': autopx(vars$1.get('config.style.fontSize'))\n\t\t},\n\t\t'.page a': {\n\t\t\tcolor: hex('config.style.linkColor'),\n\t\t\t'text-decoration-color': hex('config.style.linkLineColor')\n\t\t},\n\t\t'.page a:hover': {\n\t\t\tcolor: hex('config.style.linkActiveColor')\n\t\t},\n\t\t'.page input[type=\"text\"], .page select': {\n\t\t\t'background-color': hex('config.style.inputBg'),\n\t\t\tborder: `1px solid ${hex('config.style.inputBorderColor')}`,\n\t\t\tcolor: hex('config.style.inputFg'),\n\t\t\t'font-family': vars$1.get('config.style.inputFont'),\n\t\t\t'font-size': autopx(vars$1.get('config.style.inputFontSize'))\n\t\t}\n\t};\n\n\tswitch (vars$1.get('config.style.pageStyle')) {\n\t\tcase 'none':\n\t\t\tbreak;\n\n\t\tcase 'shadow':\n\t\t\tstyle.rules['.page']['box-shadow'] = '0 4px 8px hsla(0, 0%, 0%, 0.25)';\n\t\t\tbreak;\n\n\t\tcase 'thin line':\n\t\t\tstyle.rules['.page'].border = `1px solid ${hex(\n\t\t\t\t'config.style.pageBorderColor'\n\t\t\t)}`;\n\t\t\tbreak;\n\n\t\tcase 'thick line':\n\t\t\tstyle.rules['.page'].border = `4px solid ${hex(\n\t\t\t\t'config.style.pageBorderColor'\n\t\t\t)}`;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(\n\t\t\t\t`There is no page style named \"${vars$1.get(\n\t\t\t\t\t'config.style.pageStyle'\n\t\t\t\t)}\" exists.`\n\t\t\t);\n\t}\n\n\tlinkStyles(\n\t\tstyle.rules['.page a'],\n\t\tvars$1.get('config.style.linkStyle'),\n\t\thex('config.style.linkLineColor')\n\t);\n\n\t['header', 'footer'].forEach(type => {\n\t\tstyle.rules[type] = {\n\t\t\t'font-family': vars$1.get(`config.style.${type}Font`),\n\t\t\t'font-size': style.autopx(vars$1.get(`config.style.${type}FontSize`))\n\t\t};\n\n\t\tstyle.rules[`${type} a`] = {\n\t\t\tcolor: hex(`config.style.${type}LinkColor`)\n\t\t};\n\n\t\tstyle.rules[`${type} a:hover`] = {\n\t\t\tcolor: hex(`config.style.${type}LinkActiveColor`)\n\t\t};\n\n\t\tlinkStyles(\n\t\t\tstyle.rules[`${type} a`],\n\t\t\tvars$1.get(`config.style.${type}LinkStyle`),\n\t\t\thex(`config.style.${type}LinkLineColor`)\n\t\t);\n\t});\n\n\tstyle.update();\n}\n\nfunction init(varsInstance) {\n\tvars$1 = varsInstance;\n\tvars$1.default('config.style.bg', 'white');\n\tvars$1.default('config.style.fg', 'gray-9');\n\tvars$1.default(\n\t\t'config.style.font',\n\t\t'Palatino, \"Palatino Linotype\", Georgia, serif'\n\t);\n\tvars$1.default('config.style.fontSize', 18);\n\tvars$1.default('config.style.backdrop', 'gray-0');\n\tvars$1.default('config.style.pageBorderColor', '');\n\tvars$1.default(\n\t\t'config.style.inputFont',\n\t\t'Palatino, \"Palatino Linotype\", Georgia, serif'\n\t);\n\tvars$1.default('config.style.inputFontSize', 18);\n\tvars$1.default('config.style.inputBg', 'transparent');\n\tvars$1.default('config.style.inputFg', 'gray-9');\n\tvars$1.default('config.style.inputBorderColor', 'gray-5');\n\tvars$1.default('config.style.pageStyle', 'shadow');\n\tvars$1.default('config.style.linkColor', 'gray-9');\n\tvars$1.default('config.style.linkActiveColor', 'pink-5');\n\tvars$1.default('config.style.linkLineColor', 'pink-5');\n\tvars$1.default('config.style.linkStyle', 'underline');\n\n\t['header', 'footer'].forEach(type => {\n\t\tvars$1.default(`config.style.${type}Font`, '');\n\t\tvars$1.default(`config.style.${type}FontSize`, 16);\n\t\tvars$1.default(`config.style.${type}LinkColor`, 'gray-9');\n\t\tvars$1.default(`config.style.${type}LinkActiveColor`, 'pink-5');\n\t\tvars$1.default(`config.style.${type}LinkLineColor`, 'pink-5');\n\t\tvars$1.default(`config.style.${type}LinkStyle`, 'small caps');\n\t});\n\n\tvars$1.addListener('config.style', updateStyle);\n\tupdateStyle();\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$5 = 1 / 0;\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar funcTag$2 = '[object Function]';\nvar genTag$2 = '[object GeneratorFunction]';\nvar symbolTag$5 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp$1 = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp$1 = /^\\w*$/;\nvar reLeadingDot$1 = /^\\./;\nvar rePropName$1 = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar$2 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar$1 = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor$2 = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint$1 = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$5 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$5 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$5 = freeGlobal$5 || freeSelf$5 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$2(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject$2(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto$1 = Array.prototype;\nvar funcProto$2 = Function.prototype;\nvar objectProto$5 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData$2 = root$5['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey$2 = (function() {\n  var uid = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$2 = funcProto$2.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$5.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$5 = objectProto$5.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative$2 = RegExp('^' +\n  funcToString$2.call(hasOwnProperty$2).replace(reRegExpChar$2, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$5 = root$5.Symbol;\nvar splice$1 = arrayProto$1.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map$2 = getNative$2(root$5, 'Map');\nvar nativeCreate$1 = getNative$2(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$4 = Symbol$5 ? Symbol$5.prototype : undefined;\nvar symbolToString$4 = symbolProto$4 ? symbolProto$4.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear$1() {\n  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete$1(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet$1(key) {\n  var data = this.__data__;\n  if (nativeCreate$1) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$1 ? undefined : result;\n  }\n  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas$1(key) {\n  var data = this.__data__;\n  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$2.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet$1(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash$1.prototype.clear = hashClear$1;\nHash$1.prototype['delete'] = hashDelete$1;\nHash$1.prototype.get = hashGet$1;\nHash$1.prototype.has = hashHas$1;\nHash$1.prototype.set = hashSet$1;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear$1() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice$1.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas$1(key) {\n  return assocIndexOf$1(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet$1(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache$1.prototype.clear = listCacheClear$1;\nListCache$1.prototype['delete'] = listCacheDelete$1;\nListCache$1.prototype.get = listCacheGet$1;\nListCache$1.prototype.has = listCacheHas$1;\nListCache$1.prototype.set = listCacheSet$1;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear$1() {\n  this.__data__ = {\n    'hash': new Hash$1,\n    'map': new (Map$2 || ListCache$1),\n    'string': new Hash$1\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete$1(key) {\n  return getMapData$1(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet$1(key) {\n  return getMapData$1(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas$1(key) {\n  return getMapData$1(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet$1(key, value) {\n  getMapData$1(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache$1.prototype.clear = mapCacheClear$1;\nMapCache$1.prototype['delete'] = mapCacheDelete$1;\nMapCache$1.prototype.get = mapCacheGet$1;\nMapCache$1.prototype.has = mapCacheHas$1;\nMapCache$1.prototype.set = mapCacheSet$1;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty$2.call(object, key) && eq$2(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf$1(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq$2(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative$2(value) {\n  if (!isObject$2(value) || isMasked$2(value)) {\n    return false;\n  }\n  var pattern = (isFunction$2(value) || isHostObject$2(value)) ? reIsNative$2 : reIsHostCtor$2;\n  return pattern.test(toSource$2(value));\n}\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject$2(object)) {\n    return object;\n  }\n  path = isKey$1(path, object) ? [path] : castPath$1(path);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey$1(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject$2(objValue)\n          ? objValue\n          : (isIndex$1(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$4(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$5(value)) {\n    return symbolToString$4 ? symbolToString$4.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$5) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath$1(value) {\n  return isArray$2(value) ? value : stringToPath$1(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData$1(map, key) {\n  var data = map.__data__;\n  return isKeyable$1(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative$2(object, key) {\n  var value = getValue$2(object, key);\n  return baseIsNative$2(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex$1(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint$1.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey$1(value, object) {\n  if (isArray$2(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$5(value)) {\n    return true;\n  }\n  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable$1(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked$2(func) {\n  return !!maskSrcKey$2 && (maskSrcKey$2 in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath$1 = memoize$1(function(string) {\n  string = toString$4(string);\n\n  var result = [];\n  if (reLeadingDot$1.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName$1, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar$1, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey$1(value) {\n  if (typeof value == 'string' || isSymbol$5(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$5) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource$2(func) {\n  if (func != null) {\n    try {\n      return funcToString$2.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize$1(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT$1);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize$1.Cache || MapCache$1);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize$1.Cache = MapCache$1;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq$2(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray$2 = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction$2(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject$2(value) ? objectToString$5.call(value) : '';\n  return tag == funcTag$2 || tag == genTag$2;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$2(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$5(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$5(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$5(value) && objectToString$5.call(value) == symbolTag$5);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$4(value) {\n  return value == null ? '' : baseToString$4(value);\n}\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nvar lodash_set = set;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT$2 = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$6 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag$3 = '[object Function]';\nvar genTag$3 = '[object GeneratorFunction]';\nvar symbolTag$6 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp$2 = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp$2 = /^\\w*$/;\nvar reLeadingDot$2 = /^\\./;\nvar rePropName$2 = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar$3 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar$2 = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor$3 = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$6 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$6 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$6 = freeGlobal$6 || freeSelf$6 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$3(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject$3(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto$2 = Array.prototype;\nvar funcProto$3 = Function.prototype;\nvar objectProto$6 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData$3 = root$6['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey$3 = (function() {\n  var uid = /[^.]+$/.exec(coreJsData$3 && coreJsData$3.keys && coreJsData$3.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$3 = funcProto$3.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$6.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$6 = objectProto$6.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative$3 = RegExp('^' +\n  funcToString$3.call(hasOwnProperty$3).replace(reRegExpChar$3, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$6 = root$6.Symbol;\nvar splice$2 = arrayProto$2.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map$3 = getNative$3(root$6, 'Map');\nvar nativeCreate$2 = getNative$3(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$5 = Symbol$6 ? Symbol$6.prototype : undefined;\nvar symbolToString$5 = symbolProto$5 ? symbolProto$5.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear$2() {\n  this.__data__ = nativeCreate$2 ? nativeCreate$2(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete$2(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet$2(key) {\n  var data = this.__data__;\n  if (nativeCreate$2) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$2 ? undefined : result;\n  }\n  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas$2(key) {\n  var data = this.__data__;\n  return nativeCreate$2 ? data[key] !== undefined : hasOwnProperty$3.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet$2(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate$2 && value === undefined) ? HASH_UNDEFINED$2 : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash$2.prototype.clear = hashClear$2;\nHash$2.prototype['delete'] = hashDelete$2;\nHash$2.prototype.get = hashGet$2;\nHash$2.prototype.has = hashHas$2;\nHash$2.prototype.set = hashSet$2;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear$2() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete$2(key) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice$2.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet$2(key) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas$2(key) {\n  return assocIndexOf$2(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet$2(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache$2.prototype.clear = listCacheClear$2;\nListCache$2.prototype['delete'] = listCacheDelete$2;\nListCache$2.prototype.get = listCacheGet$2;\nListCache$2.prototype.has = listCacheHas$2;\nListCache$2.prototype.set = listCacheSet$2;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear$2() {\n  this.__data__ = {\n    'hash': new Hash$2,\n    'map': new (Map$3 || ListCache$2),\n    'string': new Hash$2\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete$2(key) {\n  return getMapData$2(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet$2(key) {\n  return getMapData$2(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas$2(key) {\n  return getMapData$2(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet$2(key, value) {\n  getMapData$2(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache$2.prototype.clear = mapCacheClear$2;\nMapCache$2.prototype['delete'] = mapCacheDelete$2;\nMapCache$2.prototype.get = mapCacheGet$2;\nMapCache$2.prototype.has = mapCacheHas$2;\nMapCache$2.prototype.set = mapCacheSet$2;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf$2(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq$3(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet$1(object, path) {\n  path = isKey$2(path, object) ? [path] : castPath$2(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey$2(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative$3(value) {\n  if (!isObject$3(value) || isMasked$3(value)) {\n    return false;\n  }\n  var pattern = (isFunction$3(value) || isHostObject$3(value)) ? reIsNative$3 : reIsHostCtor$3;\n  return pattern.test(toSource$3(value));\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$5(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$6(value)) {\n    return symbolToString$5 ? symbolToString$5.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$6) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = isKey$2(path, object) ? [path] : castPath$2(path);\n  object = parent(object, path);\n\n  var key = toKey$2(last(path));\n  return !(object != null && hasOwnProperty$3.call(object, key)) || delete object[key];\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath$2(value) {\n  return isArray$3(value) ? value : stringToPath$2(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData$2(map, key) {\n  var data = map.__data__;\n  return isKeyable$2(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative$3(object, key) {\n  var value = getValue$3(object, key);\n  return baseIsNative$3(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey$2(value, object) {\n  if (isArray$3(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$6(value)) {\n    return true;\n  }\n  return reIsPlainProp$2.test(value) || !reIsDeepProp$2.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable$2(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked$3(func) {\n  return !!maskSrcKey$3 && (maskSrcKey$3 in func);\n}\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet$1(object, baseSlice(path, 0, -1));\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath$2 = memoize$2(function(string) {\n  string = toString$5(string);\n\n  var result = [];\n  if (reLeadingDot$2.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName$2, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar$2, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey$2(value) {\n  if (typeof value == 'string' || isSymbol$6(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$6) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource$3(func) {\n  if (func != null) {\n    try {\n      return funcToString$3.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize$2(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT$2);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize$2.Cache || MapCache$2);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize$2.Cache = MapCache$2;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq$3(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray$3 = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction$3(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject$3(value) ? objectToString$6.call(value) : '';\n  return tag == funcTag$3 || tag == genTag$3;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$3(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$6(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$6(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$6(value) && objectToString$6.call(value) == symbolTag$6);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$5(value) {\n  return value == null ? '' : baseToString$5(value);\n}\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nvar lodash_unset = unset;\n\n/*\nThis manages variables set during the course of play, specifically:\n\t- saving them automatically to browser local storage when changed\n\t- allowing other modules to subscribe to changes\n\t  (e.g. to update something displayed when a variable changes)\n\nThis also maintains proxies on the window object so that authors can use\nvariable names without scoping.\n*/\n\nclass Vars$1 {\n\tconstructor(saveKey) {\n\t\tthis.saveKey = saveKey;\n\t\tthis.state = {};\n\t\tthis.defaults = {};\n\t\tthis.keys = [];\n\t\tthis.listeners = [];\n\t\tthis.autosave = true;\n\t\tthis.verbose = false;\n\t}\n\n\t/*\n\tSets a key's value, saving it to local storage and triggering relevant\n\tlisteners.\n\t*/\n\n\tset(key, value) {\n\t\tconst prevValue = this.get(key);\n\n\t\tif (this.verbose) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(`Setting var \"${key}\" to \"${value}\"`);\n\t\t}\n\n\t\tlodash_set(this.state, key, value);\n\n\t\tif (this.keys.indexOf(key) === -1) {\n\t\t\tthis.keys.push(key);\n\n\t\t\t/* Set up the proxy on the window object. */\n\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log(`Setting up proxy properties on window for \"${key}\"`);\n\t\t\t}\n\n\t\t\tlodash_unset(window, key);\n\n\t\t\tlet target = window;\n\t\t\tconst dottedProps = key.split('.');\n\t\t\tconst targetKey = dottedProps[dottedProps.length - 1];\n\n\t\t\tfor (let i = 0; i < dottedProps.length - 1; i++) {\n\t\t\t\ttarget[dottedProps[i]] = target[dottedProps[i]] || {};\n\t\t\t\ttarget = target[dottedProps[i]];\n\t\t\t}\n\n\t\t\tObject.defineProperty(target, targetKey, {\n\t\t\t\tget: () => this.get(key),\n\t\t\t\tset: value => this.set(key, value),\n\n\t\t\t\t/* Allow overwriting. */\n\t\t\t\tconfigurable: true\n\t\t\t});\n\t\t}\n\n\t\tif (this.autosave && this.canSave()) {\n\t\t\tthis.save();\n\t\t}\n\n\t\tthis.listeners.forEach(l => {\n\t\t\tif (l.regexp.test(key)) {\n\t\t\t\tl.func(key, value, prevValue, this);\n\t\t\t}\n\t\t});\n\t}\n\n\t/*\n\tSets a default value for a key. If the key is currently unset, this also\n\tsets it.\n\t*/\n\n\tdefault(key, value) {\n\t\tconst needToSet = this.get(key) === undefined;\n\n\t\tthis.defaults[key] = value;\n\n\t\tif (needToSet) {\n\t\t\tthis.set(key, value);\n\t\t}\n\t}\n\n\t/*\n\tRetrieves a key's value.\n\t*/\n\n\tget(key) {\n\t\tconst value = lodash_get(this.state, key);\n\n\t\tif (value !== undefined && value !== null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn lodash_get(this.defaults, key);\n\t}\n\n\t/*\n\tAdds a function that is called back when a particular key is changed. Pass\n\t'*' to listen to all key changes. This will also call back if a subproperty\n\tis called; that is, if a function listens to 'foo', changes to 'foo.bar' or\n\t'foo.bar.baz' will also trigger a callback.\n\t*/\n\n\taddListener(key, func) {\n\t\tlet regexp;\n\n\t\tif (key === '*') {\n\t\t\tregexp = /.*/;\n\t\t} else {\n\t\t\tregexp = new RegExp('^' + key);\n\t\t}\n\n\t\tthis.listeners.push({key, regexp, func});\n\t}\n\n\t/*\n\tRemoves an event listener. If the function actually wasn't set as a\n\tlistener, this does nothing.\n\t*/\n\n\tremoveListener(key, func) {\n\t\tthis.listeners = this.listeners.filter(\n\t\t\tl => l.func !== func || l.key !== func\n\t\t);\n\t}\n\n\t/*\n\tReturns whether it is possible to save values to local storage.\n\t*/\n\n\tcanSave() {\n\t\ttry {\n\t\t\twindow.localStorage.setItem('chapbook-test', 'a');\n\t\t\twindow.localStorage.removeItem('chapbook-test');\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\tReturns a JSON-ready representation of data stored in this object.\n\t*/\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tvars: this.keys.reduce((result, r) => {\n\t\t\t\tresult[r] = lodash_get(this.state, r);\n\t\t\t\treturn result;\n\t\t\t}, {})\n\t\t};\n\t}\n\n\t/*\n\tSaves all values to local storage for later retrieval by restore().\n\t*/\n\n\tsave() {\n\t\tif (this.verbose) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log('Saving vars');\n\t\t}\n\n\t\ttry {\n\t\t\twindow.localStorage.setItem(this.saveKey, JSON.stringify(this.toJSON()));\n\t\t} catch (e) {\n\t\t\tthrow new Error(`Could not save the story state (${e.message}).`);\n\t\t}\n\t}\n\n\tcanRestore() {\n\t\treturn this.canSave() && window.localStorage.getItem(this.saveKey) !== null;\n\t}\n\n\trestore() {\n\t\tif (this.verbose) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log('Restoring vars');\n\t\t}\n\n\t\tif (this.canRestore()) {\n\t\t\tconst toRestore = JSON.parse(window.localStorage.getItem(this.saveKey));\n\n\t\t\tObject.keys(toRestore.vars).forEach(v => {\n\t\t\t\tthis.set(v, toRestore.vars[v]);\n\t\t\t});\n\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log('Restore complete', this.state);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (this.verbose) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.log('Restoring not possible');\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\tForgets all values, but does not remove defaults. (If you want to do that,\n\tdefault a key to undefined.)\n\t*/\n\n\tforgetAll() {\n\t\tif (this.verbose) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log('Forgetting all vars');\n\t\t}\n\n\t\tthis.state = {};\n\t\tthis.keys = [];\n\t\twindow.localStorage.removeItem(this.saveKey);\n\t}\n}\n\nvar NativeCustomEvent = commonjsGlobal.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nvar customEvent = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n};\n\nclass View {\n\tconstructor(el, vars) {\n\t\tthis.el = el;\n\t\tthis.vars = vars;\n\n\t\tthis.vars.default('config.view.crossfade', true);\n\t\tthis.vars.default('config.view.transitionDuration', 1);\n\n\t\tconst elStyle = window.getComputedStyle(el);\n\n\t\t/* Force a new stacking context. */\n\n\t\tif (elStyle.position === 'static') {\n\t\t\tthis.el.style.position = 'relative';\n\t\t}\n\t}\n\n\tshow(html) {\n\t\tconst segmentLength =\n\t\t\tthis.vars.get('config.view.transitionDuration') / 2 + 's';\n\t\tlet inEl = document.createElement('div');\n\t\tlet outEl;\n\n\t\tif (this.el.innerHTML.trim() !== '') {\n\t\t\toutEl = document.createElement('div');\n\t\t\toutEl.innerHTML = this.el.innerHTML;\n\t\t\toutEl.setAttribute('aria-hidden', true);\n\t\t\toutEl.style.animationDuration = segmentLength;\n\t\t\toutEl.style.pointerEvents = 'none';\n\t\t\toutEl.style.position = 'absolute';\n\t\t\toutEl.style.top = '0';\n\t\t\toutEl.style.left = '0';\n\t\t\toutEl.className = 'fade-out';\n\n\t\t\tlet removeOut;\n\n\t\t\tif (this.vars.get('config.view.crossfade')) {\n\t\t\t\tremoveOut = e => {\n\t\t\t\t\tif (e.target === outEl) {\n\t\t\t\t\t\toutEl.removeEventListener('animationend', removeOut);\n\t\t\t\t\t\toutEl.parentNode.removeChild(outEl);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tremoveOut = e => {\n\t\t\t\t\tif (e.target === outEl) {\n\t\t\t\t\t\toutEl.removeEventListener('animationend', removeOut);\n\t\t\t\t\t\toutEl.parentNode.removeChild(outEl);\n\t\t\t\t\t\tthis.el.appendChild(inEl);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\toutEl.addEventListener('animationend', removeOut);\n\t\t}\n\n\t\tinEl.innerHTML = html;\n\t\tinEl.className = 'fade-in';\n\t\tinEl.style.animationDuration = segmentLength;\n\t\tthis.el.innerHTML = '';\n\n\t\t/* \n\t\tAfter animating in, we have to remove the fade-in class so that it\n\t\tdoesn't re-fade as part of the out element in the next transition.\n\t\t*/\n\n\t\tconst finishIn = () => {\n\t\t\tinEl.className = '';\n\t\t\tinEl.removeEventListener('animationend', finishIn);\n\t\t};\n\n\t\tinEl.addEventListener('animationend', finishIn);\n\n\t\tif (this.vars.get('config.view.crossfade')) {\n\t\t\tthis.el.appendChild(inEl);\n\n\t\t\tif (outEl) {\n\t\t\t\tthis.el.appendChild(outEl);\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\tWe are fading in the new content after the existing content\n\t\t\tdisappears. If there isn't any content to fade out, fade it in\n\t\t\timmediately.\n\t\t\t*/\n\n\t\t\tif (outEl) {\n\t\t\t\tthis.el.appendChild(outEl);\n\t\t\t} else {\n\t\t\t\tthis.el.appendChild(inEl);\n\t\t\t}\n\t\t}\n\n\t\tthis.el.dispatchEvent(new customEvent('content-change'));\n\t}\n}\n\nconst Globals = {\n\tinit() {\n\t\t/*\n\t\tLoad the story from the page's HTML.\n\t\t*/\n\n\t\tGlobals.story = new Story();\n\t\tGlobals.story.loadFromHtml(document.querySelector('tw-storydata'));\n\n\t\t/*\n\t\tCreate our variable tracker. We want this to occur as early as possible\n\t\tbecause other modules depend on it. We turn off autosaving so any setup\n\t\tdoesn't blow away pre-existing data in local storage. We'll turn it back\n\t\ton below.\n\t\t*/\n\n\t\tGlobals.vars = new Vars$1(Globals.story.name);\n\t\tGlobals.vars.autosave = false;\n\n\t\t/*\n\t\tSet the testing variable based on story options. That is, publishing a\n\t\tstory in test mode will trigger this.\n\t\t*/\n\n\t\tGlobals.vars.set(\n\t\t\t'testing',\n\t\t\ttypeof Globals.story.options === 'string' &&\n\t\t\t\tGlobals.story.options.indexOf('debug') !== -1\n\t\t);\n\n\t\t/*\n\t\tAdd error reporting; clear shown messages if the player moves to another\n\t\tpassage.\n\t\t*/\n\n\t\tGlobals.alarm = new Alarm(\n\t\t\tdocument.querySelector('.page .messages'),\n\t\t\tGlobals.vars\n\t\t);\n\n\t\t/*\n\t\tCreate template parsers and renderers.\n\t\t*/\n\n\t\tGlobals.parser = new Parser();\n\t\tGlobals.renderer = new Renderer(Globals.vars, Globals.alarm);\n\t\tModifiers.addBuiltins(Globals.renderer);\n\n\t\t/*\n\t\tConnect our view to the DOM.\n\t\t*/\n\n\t\tGlobals.view = new View(\n\t\t\tdocument.querySelector('.page article'),\n\t\t\tGlobals.vars\n\t\t);\n\t\tInput.attachTo(Globals.view.el, Globals.vars);\n\t\tLink.attachTo(Globals.view.el, Globals.go);\n\t\tinit(Globals.vars);\n\n\t\t/*\n\t\tSet up the author-facing render function. We also use for the header and\n\t\tfooter.\n\t\t*/\n\n\t\tGlobals.code = createFactory$1(Globals.parser, Globals.renderer);\n\n\t\t/*\n\t\tSet up header and footer.\n\t\t*/\n\n\t\tGlobals.header = new SideMatter(\n\t\t\tdocument.querySelector('.page header'),\n\t\t\tGlobals.code,\n\t\t\tGlobals.vars\n\t\t);\n\t\tGlobals.footer = new SideMatter(\n\t\t\tdocument.querySelector('.page footer'),\n\t\t\tGlobals.code,\n\t\t\tGlobals.vars\n\t\t);\n\t\tGlobals.footer.left = '_`story.name`_';\n\t\tGlobals.footer.right = \"`link('Restart').restart()`\";\n\n\t\t/* Set up the rest of the author functions. */\n\n\t\tGlobals.debug = new Debug();\n\t\tGlobals.color = createFactory();\n\t\tGlobals.image = createFactory$2();\n\t\tGlobals.link = createFactory$4(Globals.vars);\n\t\tGlobals.input = createFactory$3(Globals.vars);\n\t\tGlobals.passage = createFactory$5(\n\t\t\tGlobals.story,\n\t\t\tGlobals.parser,\n\t\t\tGlobals.renderer\n\t\t);\n\t\tGlobals.random = new Random();\n\n\t\t/*\n\t\tExpose properties on the window.\n\t\t*/\n\n\t\tObject.assign(window, Globals);\n\n\t\t/*\n\t\tIf possible, resume from where the user last left off--otherwise, start\n\t\tfrom the beginning. This should occur as late as possible in\n\t\tinitialization so that author-set values overwrite defaults.\n\n\t\tException: if we're in debug mode, start from scratch.\n\t\t*/\n\n\t\tif (!/\\bdebug\\b/.test(Globals.story.options)) {\n\t\t\tGlobals.vars.restore();\n\t\t}\n\t\tGlobals.vars.autosave = true;\n\t\tGlobals.vars.default('trail', []);\n\n\t\t/*\n\t\tStart the story.\n\t\t*/\n\n\t\tconst trail = Globals.vars.get('trail');\n\n\t\tif (trail.length > 0) {\n\t\t\t/* Just show the passage without creating a new history entry. */\n\n\t\t\tGlobals.view.show(Globals.passage(trail[trail.length - 1]));\n\t\t} else {\n\t\t\tconst startPassage = Globals.story.passages.find(\n\t\t\t\tp => p.id === Globals.story.startNode\n\t\t\t);\n\n\t\t\tif (startPassage) {\n\t\t\t\tGlobals.go(startPassage.name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The start passage, with ID ${\n\t\t\t\t\t\tGlobals.story.startNode\n\t\t\t\t\t}, does not exist.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tActivate the debugger if we're in debug mode.\n\t\t*/\n\n\t\tif (/\\bdebug\\b/.test(Globals.story.options) || true) {\n\t\t\tGlobals.debug.activate();\n\t\t\tGlobals.debug.addDefaultTabs(\n\t\t\t\tGlobals.vars,\n\t\t\t\tGlobals.view,\n\t\t\t\tGlobals.story,\n\t\t\t\tGlobals.passage\n\t\t\t);\n\t\t}\n\n\t\t/*\n\t\tEnable CSS transitions. We need to do this late so that there is no\n\t\ttransition while we are setting things up initially.\n\t\t*/\n\n\t\twindow.setTimeout(() => {\n\t\t\tdocument.querySelector('.page').classList.add('enable-transitions');\n\t\t}, 0);\n\t},\n\n\tgo(passageName) {\n\t\tconst trail = Globals.vars.get('trail');\n\n\t\ttrail.push(passageName);\n\n\t\tGlobals.vars.set('trail', trail);\n\t\tGlobals.view.show(Globals.passage(passageName));\n\t},\n\n\trestart(prompt) {\n\t\tif (\n\t\t\t!window.confirm(\n\t\t\t\t'Are you sure you want to restart? This will erase all saved progress.'\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst passage = Globals.story.passages.find(\n\t\t\tp => p.id === Globals.story.startNode\n\t\t);\n\n\t\tif (!passage) {\n\t\t\tthrow new Error(\n\t\t\t\t`There is no passsage with the ID ${Globals.story.startNode}.`\n\t\t\t);\n\t\t}\n\n\t\tGlobals.vars.forgetAll();\n\t\tGlobals.vars.set('trail', []);\n\t\tGlobals.go(passage.name);\n\t}\n};\n\nGlobals.init();\n\n}());\n</script>\n\t</body>\n</html>","version":"1.0.0"});