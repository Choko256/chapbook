window.storyFormat({"author":"Chris Klimas","name":"Chapbook","proofing":false,"source":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>{{STORY_NAME}}</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<style>.fade-in {\n\topacity: 0;\n\tanimation: fade-in 1s forwards;\n}\n\n@keyframes fade-in {\n\tfrom {\n\t\topacity: 0;\n\t}\n\n\tto {\n\t\topacity: 1;\n\t}\n}\n\n* {\n\tbox-sizing: border-box;\n}\n\nbody {\n\tmargin: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\ttransition: background-color 1s ease-in-out;\n}\n\nimg {\n\tmax-width: 100%;\n\theight: auto;\n}\n\ntw-storydata {\n\tdisplay: none;\n}\n\n.page {\n\twidth: 35em;\n\tmax-width: calc(100vw - 2em);\n\tline-height: 150%;\n\tmin-height: calc(100vh - 2em);\n\tmargin: 1em;\n\tpadding: 2em;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n}\n\n.page article {\n\tflex-grow: 1;\n}\n\n.page article :first-child {\n\tmargin-top: 0;\n}\n\n.page header, .page footer {\n\tdisplay: flex;\n}\n\n.page header span, .page footer span {\n\tflex-grow: 1;\n}\n\n.page header p, .page footer p {\n\tmargin: 0.5em 0 0 0;\n}\n\n.page header .center, .page footer .center {\n\ttext-align: center;\n}\n\n.page header .right, .page footer .right {\n\ttext-align: right;\n}\n\n.page header {\n\tmargin-top: 0;\n}\n\n.page header.has-content {\n\tborder-bottom: 1px solid black;\n}\n\n.page footer {\n\tmargin-bottom: 0;\n}\n\n.page footer.has-content {\n\tborder-top: 1px solid black;\n}\n\n.small-caps {\n\ttext-transform: uppercase;\n\tfont-size: 70%;\n\tletter-spacing: 0.075em;\n}</style>\n\t</head>\n\t<body>\n\t\t<form id=\"cb-validation\">\n\t\t\t<button id=\"cb-validation-tester\" hidden></button>\n\t\t\t<button id=\"cb-block-enter-key\" hidden></button>\n\t\t\t<div class=\"page\" aria-live=\"polite\">\n\t\t\t\t<header></header>\n\t\t\t\t<article></article>\n\t\t\t\t<footer></footer>\n\t\t\t</div>\n\t\t</form>\n\t\t{{STORY_DATA}}\n\t\t<script>(function () {\n/* Functions for embedding images. */\n\nvar Image = {\n\tflickr(embedCode) {\n\t\treturn embedCode;\n\t},\n\n\tunsplash(url, altText = '') {\n\t\tconst id = url.replace(/.*\\//, '');\n\t\tconst width = document.querySelector('div.page').offsetWidth;\n\t\tconst height = Math.round(width * 9 / 16);\n\n\t\treturn `<img src=\"https://source.unsplash.com/${id}/${width}x${height}\" width=\"${width}\" height=\"${height}\" alt=\"${altText}\">`;\n\t}\n};\n\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nvar matchesSelector = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}\n\nvar closest = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode;\r\n\r\n  while (parent && parent !== document) {\r\n    if (matchesSelector(parent, selector)) return parent;\r\n    parent = parent.parentNode;\r\n  }\r\n};\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"'`]/g;\nvar reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '`': '&#96;'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in IE < 9, they can break out of\n * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the\n * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nvar lodash_escape = escape;\n\n/*\nAllows the player to make choices or enter text.\n*/\n\nclass Input {\n\tconstructor(vars, saveTo) {\n\t\tthis.vars = vars;\n\t\tthis.saveTo = saveTo;\n\t\tthis.type = 'text';\n\t\tthis.required = true;\n\t}\n\n\tchoices(...choices) {\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\tcyclingLink(...choices) {\n\t\tthis.type = 'cyclingLink';\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\tmenu(...choices) {\n\t\tthis.type = 'menu';\n\t\tthis.choices = choices;\n\t\treturn this;\n\t}\n\n\ttext() {\n\t\tthis.type = 'text';\n\t\treturn this;\n\t}\n\n\trequired() {\n\t\tthis.required = true;\n\t\treturn this;\n\t}\n\n\toptional() {\n\t\tthis.required = false;\n\t\treturn this;\n\t}\n\t\n\ttoString() {\n\t\tswitch (this.type) {\n\t\t\tcase 'cyclingLink': {\n\t\t\t\tlet current = this.vars.get(this.saveTo);\n\n\t\t\t\tif (current === undefined) {\n\t\t\t\t\tthis.vars.set(this.saveTo, this.choices[0]);\n\t\t\t\t\tcurrent = this.choices[0];\n\t\t\t\t}\n\n\t\t\t\treturn `<a href=\"javascript:void(0)\" class=\"stationary\" data-cb-save-to=\"${lodash_escape(this.saveTo)}\" ${this.required && 'required'} data-cb-cycle=\"${lodash_escape(JSON.stringify(this.choices))}\">${current}</a>`;\n\t\t\t}\n\n\t\t\tcase 'menu': {\n\t\t\t\tlet current = this.vars.get(this.saveTo);\n\n\t\t\t\tif (current === undefined) {\n\t\t\t\t\tthis.vars.set(this.saveTo, this.choices[0]);\n\t\t\t\t\tcurrent = this.choices[0];\n\t\t\t\t}\n\n\t\t\t\tconst choiceHtml = this.choices.reduce(\n\t\t\t\t\t(result, choice) =>\n\t\t\t\t\t\tresult + `<option value=\"${choice}\" ${current === choice && 'selected'}>${choice}</option>`,\n\t\t\t\t\t''\n\t\t\t\t);\n\t\t\n\t\t\t\treturn `<select data-cb-save-to=\"${lodash_escape(this.saveTo)}\">${choiceHtml}</select>`;\n\t\t\t}\n\n\t\t\tcase 'text':\n\t\t\t\treturn `<input type=\"text\" value=\"${lodash_escape(this.vars.get(this.saveTo))}\" ${this.required && 'required'} data-cb-save-to=\"${lodash_escape(this.saveTo)}\">`;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`No input type named \"${this.type}\" exists.`);\n\t\t}\n\t}\n\n\tstatic attachTo(el, vars) {\n\t\t/* Cycling links. */\n\t\t\t\t\n\t\tel.addEventListener('click', e => {\n\t\t\tconst target = closest(\n\t\t\t\te.target,\n\t\t\t\t'a[data-cb-save-to][data-cb-cycle]',\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif (target) {\n\t\t\t\tconst varName = target.dataset.cbSaveTo;\n\t\t\t\tconst choices = JSON.parse(target.dataset.cbCycle);\n\t\t\t\tlet index = choices.indexOf(target.textContent) + 1;\n\t\t\t\t\n\t\t\t\tif (index === choices.length) {\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\n\t\t\t\tvars.set(varName, choices[index]);\n\t\t\t\ttarget.textContent = choices[index];\n\t\t\t}\n\t\t});\n\n\t\t/* Menus. */\n\n\t\tel.addEventListener('change', e => {\n\t\t\tconst target = closest(e.target, 'select[data-cb-save-to]', true);\n\n\t\t\tif (target) {\n\t\t\t\tvars.set(\n\t\t\t\t\ttarget.dataset.cbSaveTo,\n\t\t\t\t\ttarget.options[target.selectedIndex].value\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t/* Text fields. */\n\n\t\tel.addEventListener('input', e => {\n\t\t\tconst target = closest(\n\t\t\t\te.target,\n\t\t\t\t'input[type=\"text\"][data-cb-save-to]',\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif (target) {\n\t\t\t\tvars.set(target.dataset.cbSaveTo, target.value);\n\t\t\t}\n\t\t});\n\n\t\t/* Validation checking. */\n\n\t\tdocument.querySelector('form#cb-validation').addEventListener('submit', e => {\n\t\t\tif (Input.validationCallback) {\n\t\t\t\tInput.validationCallback();\n\t\t\t}\n\n\t\t\te.preventDefault();\n\t\t});\n\t}\n\t\n\t/*\n\tTriggers browser validation messages by simulating a click to a hidden\n\tbutton. We have to do it this way because submitting a form directly\n\tbypasses validation.\n\t*/\n\n\tstatic ifAllValid(func) {\n\t\tInput.validationCallback = func;\n\t\tdocument.querySelector('button#cb-validation-tester').click();\n\t}\n}\n\nfunction createFactory(vars) {\n\treturn (...args) => new Input(vars, ...args);\n}\n\nclass Link {\n\tstatic attachTo(el, onClick) {\n\t\tel.addEventListener('click', e => {\n\t\t\tconst target = closest(e.target, '[data-cb-passage]', true);\n\t\n\t\t\tif (target) {\n\t\t\t\tconst passage = target.dataset.cbPassage;\n\t\n\t\t\t\tif (passage) {\n\t\t\t\t\tInput.ifAllValid(() => onClick(passage));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(label) {\n\t\tthis.label = label;\n\t}\n\n\tlabelled(label) {\n\t\tthis.label = label;\n\t\treturn this;\n\t}\n\n\tto(target) {\n\t\tthis.target = target;\n\n\t\t/* Does this look like an external link? */\n\n\t\tif (/^\\w+:\\/\\/\\/?\\w/i.test(target)) {\n\t\t\tthis.type = 'url';\n\t\t}\n\t\telse {\n\t\t\tthis.type = 'passage';\n\t\t}\n\n\t\treturn this;\n\t}\n\n\trestart() {\n\t\tthis.type = 'url';\n\t\tthis.target = 'javascript:restart()';\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tswitch (this.type) {\n\t\t\tcase 'url':\n\t\t\t\treturn `<a href=\"${lodash_escape(this.target)}\">${this.label}</a>`;\n\t\t\t\n\t\t\tcase 'passage':\n\t\t\t\treturn `<a href=\"javascript:void(0)\" data-cb-passage=\"${lodash_escape(this.target)}\">${this.label}</a>`;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Don't know how to render links with type \"${this.type}\".`);\n\t\t}\n\t}\n}\n\nfunction factory(...args) {\n\treturn new Link(...args);\n}\n\n/**\n * Exports\n */\n\nvar timestring = parseTimestring;\n\n/**\n * Default options to use when parsing a timestring\n *\n * @type {Object}\n */\n\nconst DEFAULT_OPTS = {\n  hoursPerDay: 24,\n  daysPerWeek: 7,\n  weeksPerMonth: 4,\n  monthsPerYear: 12,\n  daysPerYear: 365.25\n};\n\n/**\n * Map of accepted strings to unit\n *\n * @type {Object}\n */\n\nconst UNIT_MAP = {\n  ms: ['ms', 'milli', 'millisecond', 'milliseconds'],\n  s: ['s', 'sec', 'secs', 'second', 'seconds'],\n  m: ['m', 'min', 'mins', 'minute', 'minutes'],\n  h: ['h', 'hr', 'hrs', 'hour', 'hours'],\n  d: ['d', 'day', 'days'],\n  w: ['w', 'week', 'weeks'],\n  mth: ['mon', 'mth', 'mths', 'month', 'months'],\n  y: ['y', 'yr', 'yrs', 'year', 'years']\n};\n\n/**\n * Parse a timestring\n *\n * @param  {String} string\n * @param  {String} returnUnit\n * @param  {Object} opts\n * @return {Number}\n */\n\nfunction parseTimestring (string, returnUnit, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts || {});\n\n  let totalSeconds = 0;\n  let unitValues = getUnitValues(opts);\n  let groups = string\n    .toLowerCase()\n    .replace(/[^.\\w+-]+/g, '')\n    .match(/[-+]?[0-9]+[a-z]+/g);\n\n  if (groups !== null) {\n    groups.forEach(group => {\n      let value = group.match(/[0-9]+/g)[0];\n      let unit = group.match(/[a-z]+/g)[0];\n\n      totalSeconds += getSeconds(value, unit, unitValues);\n    });\n  }\n\n  if (returnUnit) {\n    return convert(totalSeconds, returnUnit, unitValues)\n  }\n\n  return totalSeconds\n}\n\n/**\n * Get unit values based on the passed options\n *\n * @param   {Object} opts\n * @returns {Object}\n */\n\nfunction getUnitValues (opts) {\n  let unitValues = {\n    ms: 0.001,\n    s: 1,\n    m: 60,\n    h: 3600\n  };\n\n  unitValues.d = opts.hoursPerDay * unitValues.h;\n  unitValues.w = opts.daysPerWeek * unitValues.d;\n  unitValues.mth = (opts.daysPerYear / opts.monthsPerYear) * unitValues.d;\n  unitValues.y = opts.daysPerYear * unitValues.d;\n\n  return unitValues\n}\n\n/**\n * Get the key for a unit\n *\n * @param   {String} unit\n * @returns {String}\n */\n\nfunction getUnitKey (unit) {\n  for (let key of Object.keys(UNIT_MAP)) {\n    if (UNIT_MAP[key].indexOf(unit) > -1) {\n      return key\n    }\n  }\n\n  throw new Error(`The unit [${unit}] is not supported by timestring`)\n}\n\n/**\n *  Get the number of seconds for a value, based on the unit\n *\n * @param   {Number} value\n * @param   {String} unit\n * @param   {Object} unitValues\n * @returns {Number}\n */\n\nfunction getSeconds (value, unit, unitValues) {\n  return value * unitValues[getUnitKey(unit)]\n}\n\n/**\n * Convert a value from its existing unit to a new unit\n *\n * @param   {Number} value\n * @param   {String} unit\n * @param   {Object} unitValues\n * @returns {Number}\n */\n\nfunction convert (value, unit, unitValues) {\n  return value / unitValues[getUnitKey(unit)]\n}\n\n/*\nSometimes you'd like to wrap a block of Markdown text in a <div> tag to apply\nsome effect to it... but doing so turns off Markdown paragraphing inside the tag\nbecause Markdown leaves block tags alone. This module wraps each paragraph in\nMarkdown in a <span> for you.\n*/\n\nvar wrap = (markdown, attributes = {}) => {\n\tconst tag = '<span' + Object.keys(attributes).reduce(\n\t\t(result, current) => result + ` ${current}=\"${attributes[current]}\"`,\n\t\t''\n\t) + '>';\n\n\treturn tag + markdown.replace(/[\\r\\n]{2,}/g, `</span>$&${tag}`) + '</span>';\n};\n\n/*\nCauses text to appear after a delay.\n*/\n\nclass After {\n\tsetup(invocation) {\n\t\tthis.delay = timestring(invocation.replace(/^after\\s/i, ''), 'ms');\n\t}\n\n\tprocess(output, opts) {\n\t\toutput.text = wrap(\n\t\t\toutput.text,\n\t\t\t{class: 'fade-in', style: `animation-delay: ${this.delay}ms`}\n\t\t);\n\t}\n}\n\nAfter.regexps = [\n\t/^after\\s/i\n];\n\n/*\nCauses text to appear in the same paragraph as the one preceding it.\n*/\n\nclass Append {\n\tsetup() {}\n\n\tprocess(output) {\n\t\toutput.beforeText = ' ';\n\t}\n}\n\nAppend.regexps = [\n\t/^append$/i\n];\n\n/*\nHandles if, unless, and else modifiers.\n*/\n\nclass Conditionals {\n\tsetup(invocation) {\n\t\tthis.type = invocation.replace(/\\s.*/, '').toLowerCase();\n\n\t\tif (this.type !== 'else') {\n\t\t\tthis.condition = new Function('return ' + invocation.replace(/.*?\\s/, ''));\n\t\t}\n\t}\n\n\tprocess(output, opts) {\n\t\tswitch (this.type) {\n\t\t\tcase 'if':\n\t\t\t\tthis.conditionEval = this.condition.apply(window);\n\t\t\t\tbreak;\n\n\t\t\tcase 'unless':\n\t\t\t\tthis.conditionEval = !this.condition.apply(window);\n\t\t\t\tbreak;\n\n\t\t\tcase 'else':\n\t\t\t\tif (!this.condition) {\n\t\t\t\t\topts.addError('There was no matching if modifier for an else modifier.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.conditionEval = !this.conditionEval;\t\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!this.conditionEval) {\n\t\t\toutput.text = '';\n\t\t\toutput.beforeText = '';\n\t\t\toutput.afterText = '';\n\t\t}\n\t}\n}\n\nConditionals.regexps = [\n\t/^if\\s/i,\n\t/^unless\\s/i,\n\t/^else$/i\n];\n\n/*\nA no-op modifier used to reset other modifiers.\n*/\n\nclass Continue {\n\tsetup() {}\n\tprocess() {}\n}\n\nContinue.regexps = [\n\t/^continued$/i,\n\t/^continue$/i,\n\t/^cont'd$/i,\n\t/^cont$/i\n];\n\nvar Modifiers = {\n\taddBuiltins(renderer) {\n\t\trenderer.addModifier('after', After);\n\t\trenderer.addModifier('append', Append);\n\t\trenderer.addModifier('conditionals', Conditionals);\n\t\trenderer.addModifier('continue', Continue);\n\t}\n}\n\nvar splitLines = function (str, opts) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string in the first argument, got ' + typeof str);\n\t}\n\n\tvar preserveNewlines = opts && opts.preserveNewlines;\n\n\tif (!preserveNewlines) {\n\t\treturn str.split(/\\r?\\n/);\n\t}\n\n\tvar parts = str.split(/(\\r?\\n)/);\n\tvar lines = [];\n\n\tfor (var i = 0; i < parts.length; i += 2) {\n\t\tlines.push(parts[i] + (parts[i + 1] || ''));\n\t}\n\n\treturn lines;\n};\n\n/*\nThis is a template parser that processes text in a specific format:\n\n1. An optional vars section that looks like this:\n\n\tprop: value\n\tprop: value\n\t--\n\n2. Then, a series of a mixture of plain text blocks and modifiers. Modifiers\n   exist on a single line that begins and ends with [ and ]. They affect the\n   following text block *only*. Text blocks are all other text.\n\n   Modifiers can be joined on a single line by placing a semicolon between them,\n   e.g. [modifier 1; modifier 2]\n*/\n\nclass Parser {\n\tconstructor(opts = {}) {\n\t\t/*\n\t\tIf true, logs information to the console as it parses.\n\t\t*/\n\t\tthis.verbose = false;\n\t\n\t\t/*\n\t\tThe regexp matching the end of a vars section of source code.\n\t\t*/\n\t\tthis.varsSep = /^--$/m;\n\n\t\t/*\n\t\tThe regexp matching a modifier block.\n\t\t*/\n\t\tthis.modifierPattern = /^\\[([^\\[].+[^\\]])\\]$/gm;\n\n\t\tObject.assign(this, opts);\n\t}\n\n\t/*\n\tParses a source string into a structured object:\n\t\tvars: a key => value structure\n\t\tblocks: an array of {type, content} blocks\n\t\twarnings: an array of warning strings\n\t*/\n\tparse(src) {\n\t\tlet result = {\n\t\t\tvars: {},\n\t\t\tblocks: [],\n\t\t\twarnings: []\n\t\t};\n\n\t\t/* Does the source start with a vars section? */\n\n\t\tlet varsBits = src.split(this.varsSep, 2);\n\t\tlet vars, text;\n\n\t\tif (varsBits.length === 2) {\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log('vars section detected');\n\t\t\t}\n\n\t\t\t[vars, text] = varsBits;\n\n\t\t\tsplitLines(vars).forEach(line => {\n\t\t\t\tif (line.trim() === '') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst firstColon = line.indexOf(':');\n\n\t\t\t\tif (firstColon !== -1) {\n\t\t\t\t\tconst name = line.substr(0, firstColon).trim();\n\t\t\t\t\tconst value = line.substr(firstColon + 1).trim();\n\t\n\t\t\t\t\tif (result.vars[name] !== undefined) {\n\t\t\t\t\t\tresult.warnings.push(\n\t\t\t\t\t\t\t`The property \"${name}\" was defined more than once; using the last value.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\tconsole.log(`Setting prop \"${name}\" to \"${value}\"`);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.vars[name] = value;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult.warnings.push(\n\t\t\t\t\t\t`The line \"${line}\" in the properties section is missing a colon. It was ignored.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log('No vars section detected');\n\t\t\t}\n\n\t\t\ttext = varsBits[0];\n\t\t}\n\n\t\t/*\n\t\tScan the text for modifiers. They always begin immediately with a\n\t\tbracket. Because of the /g flag on the modifier pattern, successive\n\t\truns of exec() match each instance.\n\t\t*/\n\n\t\tconst addBlock = (type, content) => {\n\t\t\tconst trimmedContent = content.trim();\n\n\t\t\tif (trimmedContent === '') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log(`Creating '${type}' block with content: \"${trimmedContent}\"`);\n\t\t\t}\n\n\t\t\tresult.blocks.push({type, content: trimmedContent});\n\t\t};\n\n\t\tconst modifierPat = new RegExp(this.modifierPattern);\n\t\tlet searchIndex = 0;\n\t\tlet modifierMatch = modifierPat.exec(text);\n\n\t\twhile (modifierMatch) {\n\t\t\taddBlock('text', text.substring(searchIndex, modifierMatch.index));\n\n\t\t\t/*\n\t\t\tScan the modifier content for semicolons not inside quotation marks.\n\t\t\tWe cannot allow single quotes here because we allow modifiers such\n\t\t\tas \"cont'd\".\n\t\t\t*/\n\n\t\t\tconst modifierSrc = modifierMatch[1];\n\t\t\tlet modifier = '';\n\n\t\t\tfor (let i = 0; i < modifierSrc.length; i++) {\n\t\t\t\tswitch (modifierSrc[i]) {\n\t\t\t\t\tcase '\"':\n\t\t\t\t\t\t/* Scan ahead. */\n\n\t\t\t\t\t\tmodifier += '\"';\n\n\t\t\t\t\t\tfor (i = i + 1; i < modifierSrc.length; i++) {\n\t\t\t\t\t\t\tmodifier += modifierSrc[i];\n\n\t\t\t\t\t\t\tif (modifierSrc[i] === '\"' && modifierSrc[i - 1] !== '\\\\') {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\taddBlock('modifier', modifier);\n\t\t\t\t\t\tmodifier = '';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodifier += modifierSrc[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddBlock('modifier', modifier);\n\t\t\tsearchIndex = modifierPat.lastIndex;\n\t\t\tmodifierMatch = modifierPat.exec(text);\n\t\t}\n\n\t\t/*\n\t\tWe've finished parsing modifiers; put any remaining text into a final\n\t\tblock.\n\t\t*/\n\n\t\taddBlock('text', text.substring(searchIndex));\n\t\treturn result;\n\t}\n}\n\nvar alea = createCommonjsModule(function (module) {\n// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xor128 = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xorwow = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xorshift7 = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar xor4096 = createCommonjsModule(function (module) {\n// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  commonjsGlobal,                                     // window object or global\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar tychei = createCommonjsModule(function (module) {\n// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); };\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  commonjsGlobal,\n  ('object') == 'object' && module,    // present in node.js\n  (typeof undefined) == 'function' && undefined   // present with an AMD loader\n);\n});\n\nvar empty = {};\n\n\nvar empty$1 = Object.freeze({\n\tdefault: empty\n});\n\nvar require$$0 = ( empty$1 && empty ) || empty$1;\n\nvar seedrandom = createCommonjsModule(function (module) {\n/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; };\n  prng.quick = function() { return arc4.g(4) / 0x100000000; };\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); };\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif (('object') == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require$$0;\n  } catch (ex) {}\n} else if ((typeof undefined) == 'function' && undefined.amd) {\n  undefined(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n});\n\n// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\n\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\n\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\n\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\n\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\n\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\n\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\n\n\nseedrandom.alea = alea;\nseedrandom.xor128 = xor128;\nseedrandom.xorwow = xorwow;\nseedrandom.xorshift7 = xorshift7;\nseedrandom.xor4096 = xor4096;\nseedrandom.tychei = tychei;\n\nvar seedrandom$2 = seedrandom;\n\n/*\nFunctions for random behavior.\n*/\n\nclass Random {\n\tconstructor(seed) {\n\t\tthis.rng = seedrandom$2(seed);\n\t}\n\n\t/*\n\tSeeds the random number generator so that subsequent calls are predictable.\n\tUseful for testing.\n\t*/\n\n\tseed(value) {\n\t\tthis.rng = seedrandom$2(value);\n\t}\n\n\t/*\n\tReturns either true or false, randomly.\n\t*/\n\n\tcoinFlip() {\n\t\treturn this.rng() > 0.5;\n\t}\n\n\t/*\n\tReturns a set of simulated die rolls. See\n\thttps://en.wikipedia.org/wiki/Dice_notation for an explanation of the format\n\tthis accepts.\n\t*/\n\n\troll(spec) {\n\t\tconst bits = spec.split(/d/i);\n\n\t\tif (bits.length !== 2) {\n\t\t\tthrow new Error(\n\t\t\t\t'A roll must in the format [number of rolls]d[number of sides], i.e. 1d4.'\n\t\t\t);\n\t\t}\n\n\t\tconst rolls = parseInt(bits[0]);\n\n\t\tif (isNaN(rolls)) {\n\t\t\tthrow new Error(`The number of rolls specified (${bits[0]}) isn't a number.`);\n\t\t}\n\n\t\tconst sides = parseInt(bits[1]);\n\n\t\tif (isNaN(sides)) {\n\t\t\tthrow new Error(`The number of die sides specified (${bits[1]}) isn't a number.`);\n\t\t}\n\n\t\tlet total = 0;\n\n\t\tfor (let i = 0; i < rolls; i++) {\n\t\t\ttotal += 1 + Math.round(this.rng() * (sides - 1));\n\t\t}\n\n\t\treturn total;\n\t}\n\n\t/*\n\tReturns a randomly chosen argument.\n\t*/\n\n\tchoice(...choices) {\n\t\treturn choices[Math.round(this.rng() * (choices.length - 1))];\n\t}\n}\n\nvar marked = createCommonjsModule(function (module, exports) {\n/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)([\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(\n          cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1])\n        );\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return '';\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[^]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[^]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nbaseUrls = {};\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false,\n  baseUrl: null\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\n{\n  module.exports = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : commonjsGlobal);\n}());\n});\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$1 = 1 / 0;\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar symbolTag$1 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp = /^\\w*$/;\nvar reLeadingDot = /^\\./;\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\nvar funcProto = Function.prototype;\nvar objectProto$1 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root$1['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto$1.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$1 = objectProto$1.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$1 = root$1.Symbol;\nvar splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root$1, 'Map');\nvar nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$1(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$1(value)) {\n    return symbolToString$1 ? symbolToString$1.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$1(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString$1(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol$1(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString$1.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$1(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$1(value) {\n  return value == null ? '' : baseToString$1(value);\n}\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nvar lodash_set = set;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$2 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag$2 = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g;\nvar reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/** Used to map HTML entities to characters. */\nvar htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n  '&#96;': '`'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf$1(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.unescape` to convert HTML entities to characters.\n *\n * @private\n * @param {string} chr The matched character to unescape.\n * @returns {string} Returns the unescaped character.\n */\nvar unescapeHtmlChar = basePropertyOf$1(htmlUnescapes);\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$2 = objectProto$2.toString;\n\n/** Built-in value references. */\nvar Symbol$2 = root$2.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined;\nvar symbolToString$2 = symbolProto$2 ? symbolProto$2.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$2(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$2(value)) {\n    return symbolToString$2 ? symbolToString$2.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$2(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$2(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$2(value) {\n  return value == null ? '' : baseToString$2(value);\n}\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nfunction unescape(string) {\n  string = toString$2(string);\n  return (string && reHasEscapedHtml.test(string))\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\n    : string;\n}\n\nvar lodash_unescape = unescape;\n\n/*\nA custom renderer for Marked that, instead of outputting code blocks, evaluates\nthem, and outputs small caps instead of strikethrough text.\n*/\n\nlet renderer = new marked.Renderer();\n\n/* Evaluate code blocks without outputting anything. */\n\nrenderer.code = src => {\n\tconst func = new Function(lodash_unescape(src));\n\n\tfunc.apply(window);\n\treturn '';\n};\n\n/*\nEvaluate code spans, and if they end up having a non-null or undefined result,\noutput it.\n*/\n\nrenderer.codespan = src => {\n\tconst func = new Function(`return (${lodash_unescape(src)})`);\n\tconst result = func.apply(window);\n\n\tif (result !== null && result !== undefined) {\n\t\treturn result.toString();\n\t}\n};\n\nrenderer.del = src => {\n\treturn `<span class=\"small-caps\">${src}</span>`;\n};\n\nfunction linkParser(source) {\n\tlet result = source;\n\n\t/* [[links]] */\n\n\tresult = result.replace(/\\[\\[(.*?)\\]\\]/g, (match, target) => {\n\t\tlet label = target;\n\n\t\t/* display|target format */\n\n\t\tconst barIndex = target.indexOf('|');\n\n\t\tif (barIndex !== -1) {\n\t\t\tlabel = target.substr(0, barIndex);\n\t\t\ttarget = target.substr(barIndex + 1);\n\t\t}\n\t\telse {\n\t\t\t/* display->target format */\n\n\t\t\tconst rightArrIndex = target.indexOf('->');\n\n\t\t\tif (rightArrIndex !== -1) {\n\t\t\t\tlabel = target.substr(0, rightArrIndex);\n\t\t\t\ttarget = target.substr(rightArrIndex + 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/* target<-display format */\n\n\t\t\t\tconst leftArrIndex = target.indexOf('<-');\n\n\t\t\t\tif (leftArrIndex !== -1) {\n\t\t\t\t\tlabel = target.substr(leftArrIndex + 2);\n\t\t\t\t\ttarget = target.substr(0, leftArrIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Link(label).to(target).toString();\n\t});\n\n\treturn result;\n}\n\n/*\nThis \"renders\" a template as parsed by the `parser` module. It actually does\nmore than render it to HTML, as templates have side effects (e.g. changing\nvariables).\n*/\n\nclass Renderer {\n\tconstructor(vars, opts = {}) {\t\t\n\t\t/*\n\t\tIf true, logs information to the console as it renders.\n\t\t*/\n\t\tthis.verbose = false;\n\n\t\t/*\n\t\tActive modifiers.\n\t\t*/\n\t\tthis.modifiers = [];\n\n\t\t/*\n\t\tOptions passed to the `marked` module in the `toHtml()` function.\n\t\t*/\n\n\t\tthis.markedOptions = {\n\t\t\trenderer: renderer,\n\t\t\tsmartypants: true\n\t\t};\n\n\t\tObject.assign(this, opts);\n\t\tthis.vars = vars;\n\t}\n\n\t/*\n\tAdds a modifier class to the rendering process. During each render, a new\n\tinstance of the modifier will be created. This is to allow a modifier to\n\tremember state between invocations.\n\t*/\n\n\taddModifier(name, modifier) {\n\t\t/* Check for repeats. */\n\n\t\tif (this.modifiers.some(m => m.name === name)) {\n\t\t\tthrow new Error(`A modifier named \"${name}\" has already been added to this renderer`);\n\t\t}\n\n\t\tif (!modifier.regexps || !modifier.regexps.length) {\n\t\t\tthrow new Error(`A modifier must have a static regexps property`);\n\t\t}\n\n\t\tmodifier.regexps.forEach(\n\t\t\tregexp => this.modifiers.push({name, regexp, modifier})\n\t\t);\n\t}\n\n\t/*\n\tRemoves a modifier class from the rendering process.\n\t*/\n\n\tremoveModifier(name) {\n\t\tconst oldLen = this.modifiers.length;\n\n\t\tthis.modifiers = this.modifiers.filter(m => m.name !== name);\n\n\t\tif (this.modifiers.length === oldLen) {\n\t\t\tthrow new Error(`A modifier named \"${name}\" does not exist in this renderer`);\n\t\t}\n\t}\n\n\t/*\n\tAs a final step, the text blocks concatenated are run through this function\n\tto convert the source to HTML. By default, this runs the text through `marked`.\n\t*/\n\n\ttoHtml(source) {\n\t\tmarked.setOptions(this.markedOptions);\n\t\treturn marked(source);\n\t}\n\n\t/*\n\tThe main render process. Returns an object with markdown, html, warnings,\n\tand errors properties.\n\t*/\n\n\trender(parsed) {\n\t\tlet output = {\n\t\t\tmarkdown: '',\n\t\t\thtml: '',\n\t\t\twarnings: parsed.warnings || [],\n\t\t\terrors: parsed.errors || []\n\t\t};\n\n\t\t/*\n\t\tSet global variables as denoted by properties.\n\t\t*/\n\n\t\tif (parsed.vars) {\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log(`Setting vars...`, parsed.vars);\n\t\t\t}\n\n\t\t\tObject.keys(parsed.vars).forEach(name => {\n\t\t\t\tif (this.verbose) {\n\t\t\t\t\tconsole.log(`Setting var \"${name}\"`);\n\t\t\t\t}\n\n\t\t\t\tthis.vars.set(name, new Function('return ' + parsed.vars[name])());\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.warn('Renderer was given an object with no vars');\n\t\t}\n\n\t\t/*\n\t\tParse the blocks in sequence.\n\t\t*/\n\n\t\tlet activeModifiers = [];\n\t\tlet modifierInstances = {};\n\n\t\t/*\n\t\tTiny functions we give to active modifiers to allow adding warnings and errors.\n\t\t*/\n\n\t\tconst modifierOpts = {\n\t\t\taddWarning(message) { output.warnings.push(message); },\n\t\t\taddError(message) { output.errors.push(message); }\n\t\t};\n\n\t\tif (parsed.blocks) {\n\t\t\tparsed.blocks.forEach(block => {\n\t\t\t\tswitch (block.type) {\n\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tWe allow modifiers to change the text, as well as add text\n\t\t\t\t\t\tbefore or after it. We allow this separation to keep the\n\t\t\t\t\t\toriginal text intact.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tlet blockOutput = {\n\t\t\t\t\t\t\ttext: linkParser(block.content),\n\t\t\t\t\t\t\tbeforeText: '\\n\\n',\n\t\t\t\t\t\t\tafterText: ''\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tAllow all active modifiers to alter the text, then clear\n\t\t\t\t\t\tthem so that the next set of modifiers will start with a\n\t\t\t\t\t\tclean slate.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\tconsole.log(`Running ${activeModifiers.length} modifiers on text block...`);\n\t\t\t\t\t\t\tactiveModifiers.forEach(m => {\n\t\t\t\t\t\t\t\tm.process(blockOutput, modifierOpts);\n\t\t\t\t\t\t\t\tconsole.table(blockOutput);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tactiveModifiers.forEach(m => m.process(blockOutput, modifierOpts));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.markdown += blockOutput.beforeText + blockOutput.text +\n\t\t\t\t\t\t\tblockOutput.afterText;\n\t\t\t\t\t\tactiveModifiers = [];\n\n\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\tconsole.log(`Output after modifiers:`);\n\t\t\t\t\t\t\tconsole.table(blockOutput);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'modifier': {\n\t\t\t\t\t\t/* Find all modifiers whose regexp matches this one's. */\n\n\t\t\t\t\t\tconst mods = this.modifiers.filter(\n\t\t\t\t\t\t\tm => m.regexp.test(block.content)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (mods.length === 1) {\n\t\t\t\t\t\t\tconst mod = mods[0];\n\n\t\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t\tconsole.log(`Activated \"${mod.name}\" modifier matching [${block.content}]`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!modifierInstances[mod.name]) {\n\t\t\t\t\t\t\t\tif (this.verbose) {\n\t\t\t\t\t\t\t\t\tconsole.log(`Creating new instance of \"${mod.name}\" modifier`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tmodifierInstances[mod.name] = new mod.modifier();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodifierInstances[mod.name].setup(block.content);\n\t\t\t\t\t\t\tactiveModifiers.push(modifierInstances[mod.name]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (mods.length === 0) {\n\t\t\t\t\t\t\toutput.warnings.push(`No modifiers matched \"[${block.content}]\". It was ignored.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\toutput.warnings.push(`More than one modifier matched \"[${block.content}]\". It was ignored.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Don't know how to render a block with type \"${block.type}\".`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.warn('Renderer was given an object with no blocks');\n\t\t}\n\n\t\toutput.html = this.toHtml(output.markdown);\n\t\treturn output;\n\t}\n}\n\nconst positions = ['left', 'center', 'right'];\n\nclass SideMatter {\n\tconstructor(el, render, vars) {\n\t\tthis.el = el;\n\t\tthis.render = render;\n\n\t\tpositions.forEach(pos => {\t\t\t\n\t\t\tconst posEl = document.createElement('span');\n\t\t\t\n\t\t\tposEl.className = pos;\n\t\t\tthis.el.appendChild(posEl);\n\t\t\tthis[pos + 'El'] = posEl;\n\t\t\tthis[pos] = '';\n\t\t});\n\n\t\tvars.addListener('*', () => { this.update(); });\n\t}\n\n\tupdate() {\n\t\tlet hasContent = false;\n\n\t\tpositions.forEach(pos => {\n\t\t\tconst content = this.render(this[pos]);\n\n\t\t\tthis[pos + 'El'].innerHTML = content;\n\n\t\t\tif (content) {\n\t\t\t\thasContent = true;\n\t\t\t}\n\t\t});\n\n\t\tif (hasContent) {\n\t\t\tthis.el.classList.add('has-content');\n\t\t}\n\t\telse {\n\t\t\tthis.el.classList.remove('has-content');\n\t\t}\n\t}\n}\n\n/*\nA class to manage a passage as published from Twine.\n*/\n\nclass Passage {\n\tconstructor() {\n\t\tthis.tags = [];\n\t}\n\n\tloadFromHtml(el) {\n\t\tconst tagAttr = el.getAttribute('tags');\n\n\t\tthis.name = el.getAttribute('name');\n\t\tthis.id = parseInt(el.getAttribute('pid'));\n\n\t\tif (tagAttr) {\n\t\t\tthis.tags = tagAttr.split(' ');\n\t\t}\n\n\t\tthis.source = el.textContent;\n\t}\n}\n\n/*\nA class to manage the story as published from Twine.\n*/\n\nclass Story {\n\tconstructor(view, parser, renderer) {\n\t\tthis.view = view;\n\t\tthis.parser = parser;\n\t\tthis.renderer = renderer;\n\t\tthis.passages = [];\n\t\tthis.customScripts = [];\n\t\tthis.customStyles = [];\n\t}\n\t\n\t/*\n\tLoads all data from a <tw-storydata> DOM element.\n\t*/\n\n\tloadFromHtml(el) {\n\t\t/* Basic attributes. */\n\n\t\t(['name', 'creator', 'ifid']).forEach(\n\t\t\tattr => this[attr] = el.getAttribute(attr)\n\t\t);\n\n\t\t/* Camel-case creator version and start node. */\n\n\t\tthis.startNode = parseInt(el.getAttribute('startnode'));\n\t\tthis.creatorVersion = el.getAttribute('creator-version');\n\t\t\n\t\t/* Load custom script and styles. */\n\n\t\tconst elsToContents = els => Array.from(els).map(el => el.textContent);\n\n\t\tthis.customScripts = elsToContents(el.querySelectorAll('[type=\"text/twine-javascript\"]'));\n\t\tthis.customStyles = elsToContents(el.querySelectorAll('[type=\"text/twine-css\"]'));\n\n\t\t/* Create passages. */\n\n\t\tthis.passages = Array.from(el.querySelectorAll('tw-passagedata')).map(el => {\n\t\t\tlet p = new Passage();\n\n\t\t\tp.loadFromHtml(el);\n\t\t\treturn p;\n\t\t});\n\t}\n\n\tpassage(name) {\n\t\treturn this.passages.find(p => p.name === name);\n\t}\n}\n\n/*\nLoads a Google font embed.\n*/\n\nlet el;\n\nfunction googleFont(src) {\n\tif (!el) {\n\t\tel = document.createElement('div');\n\t\tdocument.body.appendChild(el);\n\t}\n\n\tel.innerHTML = src;\n}\n\nfunction linkStyles(rules, type, lineColor) {\n\tswitch (type) {\n\t\tcase 'bold':\n\t\t\tObject.assign(\n\t\t\t\trules,\n\t\t\t\t{\n\t\t\t\t\t'text-decoration': 'none',\n\t\t\t\t\t'font-weight': 'bold'\n\t\t\t\t}\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'italic':\n\t\t\tObject.assign(\n\t\t\t\trules,\n\t\t\t\t{\n\t\t\t\t\t'text-decoration': 'none',\n\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t}\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'none':\n\t\t\trules['text-decoration'] = 'none';\n\t\t\tbreak;\n\n\t\tcase 'small caps':\n\t\t\tObject.assign(\n\t\t\t\trules,\n\t\t\t\t{\n\t\t\t\t\t'text-decoration': 'none',\n\t\t\t\t\t'text-transform': 'uppercase',\n\t\t\t\t\t'font-size': '70%',\n\t\t\t\t\t'letter-spacing': '0.075em'\t\n\t\t\t\t}\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'underline':\n\t\t\t/*\n\t\t\tWe rely on links receiving an underline by default.\n\t\t\t*/\n\n\t\t\tObject.assign(\n\t\t\t\trules,\n\t\t\t\t{\n\t\t\t\t\t'text-decoration-color': lineColor\n\t\t\t\t}\n\t\t\t);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`No link style named \"${type}\" exists.`);\n\t}\n}\n\n/*\nThese colors come from the Material design palette. Normal colors are the 500\nvariants, pale the 50, light the 200, and dark the 900.\n*/\n\nvar Colors = {\n\t'black': '#000000',\n\t'white': '#ffffff',\n\n\t'red': '#f44336',\n\t'pale red': '#ffebee',\n\t'light red': '#ef9a9a',\n\t'dark red': '#b71c1c',\n\n\t'pink': '#e91e63',\n\t'pale pink': '#fce4ec',\n\t'light pink': '#f48fb1',\n\t'dark pink': '#880e4f',\n\n\t'purple': '#9c27b0',\n\t'pale purple': '#f3e5f5',\n\t'light purple': '#ce93d8',\n\t'dark purple': '#4a148c',\n\n\t'deep purple': '#673ab7',\n\t'pale deep purple': '#ede7f6',\n\t'light deep purple': '#b39ddb',\n\t'dark deep purple': '#311b92',\n\n\t'indigo': '#3f51b5',\n\t'pale indigo': '#e8eaf6',\n\t'light indigo': '#9fa8da',\n\t'dark indigo': '#1a237e',\n\n\t'blue': '#2196f3',\n\t'pale blue': '#e3f2fd',\n\t'light blue': '#90caf9',\n\t'dark blue': '#0d47a1',\n\n\t'cyan': '#00bcd4',\n\t'pale cyan': '#e0f7fa',\n\t'light cyan': '#80deea',\n\t'dark cyan': '#006064',\n\n\t'teal': '#009688',\n\t'pale teal': '#e0f2f1',\n\t'light teal': '#80cbc4',\n\t'dark teal': '#004d40',\n\n\t'green': '#4caf50',\n\t'pale green': '#e8f5e9',\n\t'light green': '#a5d6a7',\n\t'dark green': '#1b5e20',\n\n\t'lime': '#cddc39',\n\t'pale lime': '#f9fbe7',\n\t'light lime': '#e6ee9c',\n\t'dark lime': '#827717',\n\n\t'yellow': '#ffeb3b',\n\t'pale yellow': '#fffde7',\n\t'light yellow': '#fff59d',\n\t'dark yellow': '#f57f17',\n\n\t'amber': '#ffc107',\n\t'pale amber': '#fff8e1',\n\t'light amber': '#ffe082',\n\t'dark amber': '#ff6f00',\n\n\t'orange': '#ff9800',\n\t'pale orange': '#fff3e0',\n\t'light orange': '#ffcc80',\n\t'dark orange': '#e65100',\n\n\t'brown': '#795548',\n\t'pale brown': '#efebe9',\n\t'light brown': '#bcaaa4',\n\t'dark brown': '#3e2723',\n\n\t'gray': '#9e9e9e',\n\t'pale gray': '#fafafa',\n\t'light gray': '#eeeeee',\n\t'dark gray': '#212121',\n\n\t'blue gray': '#607d8b',\n\t'pale blue gray': '#eceff1',\n\t'light blue gray': '#b0bec5',\n\t'dark blue gray': '#263238'\n};\n\n/*\nA lightweight JavaScript interface for adding stylesheets to the DOM. Its main\ninterface is its rules property, which stores selector => rules pairs. For example:\n\nthis.rules['body p'] = {color: 'red', 'font-size': 18};\n\nThis creates CSS rules as-is; you must use the key 'font-size', not fontSize.\n*/\n\nclass Stylesheet {\n\tconstructor(rules = {}) {\n\t\tthis.el = document.createElement('style');\n\t\tdocument.head.appendChild(this.el);\n\t\tthis.rules = rules;\n\t}\n\n\t/*\n\tCoerces a number to a pixel value.\n\t*/\n\n\tautopx(value) {\n\t\treturn typeof value === 'number' ? value + 'px' : value;\n\t}\n\n\t/*\n\tTranslates a color name to a hex value if it exists; otherwise leaves it alone.\n\t*/\n\n\tcolor(value) {\n\t\treturn Colors[value] || value;\n\t}\n\n\t/*\n\tUpdates the DOM <style> element to reflect the rules property.\n\t*/\n\n\tupdate() {\n\t\tfunction cssify(selector, props) {\n\t\t\treturn selector + '{' + Object.keys(props).reduce(\n\t\t\t\t(result, current) => result + current + ':' +\n\t\t\t\t\tprops[current] + ';',\n\t\t\t\t''\n\t\t\t) + '}';\t\n\t\t}\n\n\t\tthis.el.innerHTML = Object.keys(this.rules).reduce(\n\t\t\t(result, rule) => result + cssify(rule, this.rules[rule]),\n\t\t\t''\n\t\t);\n\t}\n\n\t/*\n\tRemoves the stylesheet from the DOM.\n\t*/\n\n\tdetach() {\n\t\tdocument.head.removeChild(this.el);\n\t}\n}\n\n/*\nA singleton that updates the appearance of elements onscreen.\n*/\n\nlet vars;\nlet style;\n\nfunction updateStyle(key, value, prevValue) {\n\tif (vars.get('config.style.googleFont')) {\n\t\tgoogleFont(vars.get('config.style.googleFont'));\n\t}\n\n\tif (!style) {\n\t\tstyle = new Stylesheet();\n\t}\n\t\n\tconst {color, autopx} = style;\n\n\tstyle.rules = {\n\t\t'body': {\n\t\t\t'background-color': color(vars.get('config.style.backdrop'))\n\t\t},\n\t\t'.page': {\n\t\t\t'background-color': color(vars.get('config.style.bg')),\n\t\t\t'color': color(vars.get('config.style.fg')),\n\t\t\t'font-family': color(vars.get('config.style.font')),\n\t\t\t'font-size': autopx(vars.get('config.style.fontSize'))\n\t\t},\n\t\t'.page a': {\n\t\t\t'color': color(vars.get('config.style.linkColor')),\n\t\t\t'text-decoration-color': color(vars.get('config.style.linkLineColor'))\n\t\t},\n\t\t'.page a:hover': {\n\t\t\t'color': color(vars.get('config.style.linkActiveColor'))\n\t\t}\n\t};\n\n\tswitch (vars.get('config.style.pageStyle')) {\n\t\tcase 'none':\n\t\t\tbreak;\n\n\t\tcase 'shadow':\n\t\t\tstyle.rules['.page']['box-shadow'] = '0 4px 8px hsla(0, 0%, 0%, 0.25)';\n\t\t\tbreak;\n\n\t\tcase 'thin line':\n\t\t\tstyle.rules['.page'].border = `1px solid ${color(vars.get('config.style.pageBorderColor'))}`;\n\t\t\tbreak;\n\n\t\tcase 'thick line':\n\t\t\tstyle.rules['.page'].border = `4px solid ${color(vars.get('config.style.pageBorderColor'))}`;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`No page style named \"${vars.get('config.style.pageStyle')}\" exists.`);\n\t}\n\n\tlinkStyles(\n\t\tstyle.rules['.page a'],\n\t\tvars.get('config.style.linkStyle'),\n\t\tstyle.color(vars.get('config.style.linkLineColor'))\n\t);\n\n\t['header', 'footer'].forEach(type => {\n\t\tstyle.rules[type] = {\n\t\t\t'font-family': vars.get(`config.style.${type}Font`),\n\t\t\t'font-size': style.autopx(vars.get(`config.style.${type}FontSize`))\n\t\t};\n\n\t\tstyle.rules[`${type} a`] = {\n\t\t\t'color': vars.get(`config.style.${type}LinkColor`)\n\t\t};\n\n\t\tstyle.rules[`${type} a:hover`] = {\n\t\t\t'color': vars.get(`config.style.${type}LinkActiveColor`)\n\t\t};\n\n\t\tlinkStyles(\n\t\t\tstyle.rules[`${type} a`],\n\t\t\tvars.get(`config.style.${type}LinkStyle`),\n\t\t\tvars.get(`config.style.${type}LinkLineColor`)\n\t\t);\n\t});\n\n\tstyle.update();\n}\n\nfunction init(varsInstance) {\n\tvars = varsInstance;\n\tvars.default('config.style.bg', 'white');\n\tvars.default('config.style.fg', 'dark gray');\n\tvars.default('config.style.font', '\"Hoefler Text\", \"Calisto MT\", Georgia, serif');\n\tvars.default('config.style.fontSize', 18);\n\tvars.default('config.style.backdrop', 'pale blue gray');\n\tvars.default('config.style.pageBorderColor', '');\n\tvars.default('config.style.pageStyle', 'shadow');\n\tvars.default('config.style.linkColor', 'dark gray');\n\tvars.default('config.style.linkActiveColor', 'cyan');\n\tvars.default('config.style.linkLineColor', 'cyan');\n\tvars.default('config.style.linkStyle', 'underline');\n\n\t['header', 'footer'].forEach(type => {\n\t\tvars.default(`config.style.${type}Font`, '');\n\t\tvars.default(`config.style.${type}FontSize`, 16);\n\t\tvars.default(`config.style.${type}LinkColor`, 'dark gray');\n\t\tvars.default(`config.style.${type}LinkActiveColor`, 'cyan');\n\t\tvars.default(`config.style.${type}LinkLineColor`, 'cyan');\n\t\tvars.default(`config.style.${type}LinkStyle`, 'small caps');\t\n\t});\n\n\tvars.addListener('config.style', updateStyle);\n\tupdateStyle();\n}\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$3 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag$1 = '[object Function]';\nvar genTag$1 = '[object GeneratorFunction]';\nvar symbolTag$3 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp$1 = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp$1 = /^\\w*$/;\nvar reLeadingDot$1 = /^\\./;\nvar rePropName$1 = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar$1 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar$1 = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor$1 = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$1(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject$1(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto$1 = Array.prototype;\nvar funcProto$1 = Function.prototype;\nvar objectProto$3 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData$1 = root$3['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey$1 = (function() {\n  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$1 = funcProto$1.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$3.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$3 = objectProto$3.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative$1 = RegExp('^' +\n  funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar$1, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$3 = root$3.Symbol;\nvar splice$1 = arrayProto$1.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map$1 = getNative$1(root$3, 'Map');\nvar nativeCreate$1 = getNative$1(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$3 = Symbol$3 ? Symbol$3.prototype : undefined;\nvar symbolToString$3 = symbolProto$3 ? symbolProto$3.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear$1() {\n  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete$1(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet$1(key) {\n  var data = this.__data__;\n  if (nativeCreate$1) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$1 ? undefined : result;\n  }\n  return hasOwnProperty$1.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas$1(key) {\n  var data = this.__data__;\n  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$1.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet$1(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash$1.prototype.clear = hashClear$1;\nHash$1.prototype['delete'] = hashDelete$1;\nHash$1.prototype.get = hashGet$1;\nHash$1.prototype.has = hashHas$1;\nHash$1.prototype.set = hashSet$1;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear$1() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice$1.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas$1(key) {\n  return assocIndexOf$1(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet$1(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf$1(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache$1.prototype.clear = listCacheClear$1;\nListCache$1.prototype['delete'] = listCacheDelete$1;\nListCache$1.prototype.get = listCacheGet$1;\nListCache$1.prototype.has = listCacheHas$1;\nListCache$1.prototype.set = listCacheSet$1;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache$1(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear$1() {\n  this.__data__ = {\n    'hash': new Hash$1,\n    'map': new (Map$1 || ListCache$1),\n    'string': new Hash$1\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete$1(key) {\n  return getMapData$1(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet$1(key) {\n  return getMapData$1(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas$1(key) {\n  return getMapData$1(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet$1(key, value) {\n  getMapData$1(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache$1.prototype.clear = mapCacheClear$1;\nMapCache$1.prototype['delete'] = mapCacheDelete$1;\nMapCache$1.prototype.get = mapCacheGet$1;\nMapCache$1.prototype.has = mapCacheHas$1;\nMapCache$1.prototype.set = mapCacheSet$1;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf$1(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq$1(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey$1(path, object) ? [path] : castPath$1(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey$1(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative$1(value) {\n  if (!isObject$1(value) || isMasked$1(value)) {\n    return false;\n  }\n  var pattern = (isFunction$1(value) || isHostObject$1(value)) ? reIsNative$1 : reIsHostCtor$1;\n  return pattern.test(toSource$1(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$3(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$3(value)) {\n    return symbolToString$3 ? symbolToString$3.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath$1(value) {\n  return isArray$1(value) ? value : stringToPath$1(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData$1(map, key) {\n  var data = map.__data__;\n  return isKeyable$1(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative$1(object, key) {\n  var value = getValue$1(object, key);\n  return baseIsNative$1(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey$1(value, object) {\n  if (isArray$1(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$3(value)) {\n    return true;\n  }\n  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable$1(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked$1(func) {\n  return !!maskSrcKey$1 && (maskSrcKey$1 in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath$1 = memoize$1(function(string) {\n  string = toString$3(string);\n\n  var result = [];\n  if (reLeadingDot$1.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName$1, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar$1, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey$1(value) {\n  if (typeof value == 'string' || isSymbol$3(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource$1(func) {\n  if (func != null) {\n    try {\n      return funcToString$1.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize$1(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT$1);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize$1.Cache || MapCache$1);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize$1.Cache = MapCache$1;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq$1(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray$1 = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction$1(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject$1(value) ? objectToString$3.call(value) : '';\n  return tag == funcTag$1 || tag == genTag$1;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$1(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$3(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$3(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$3(value) && objectToString$3.call(value) == symbolTag$3);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$3(value) {\n  return value == null ? '' : baseToString$3(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nvar lodash_get = get;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT$2 = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$4 = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag$2 = '[object Function]';\nvar genTag$2 = '[object GeneratorFunction]';\nvar symbolTag$4 = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp$2 = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp$2 = /^\\w*$/;\nvar reLeadingDot$2 = /^\\./;\nvar rePropName$2 = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar$2 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar$2 = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor$2 = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$4 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$4 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$4 = freeGlobal$4 || freeSelf$4 || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$2(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject$2(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto$2 = Array.prototype;\nvar funcProto$2 = Function.prototype;\nvar objectProto$4 = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData$2 = root$4['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey$2 = (function() {\n  var uid = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$2 = funcProto$2.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$4.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$4 = objectProto$4.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative$2 = RegExp('^' +\n  funcToString$2.call(hasOwnProperty$2).replace(reRegExpChar$2, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$4 = root$4.Symbol;\nvar splice$2 = arrayProto$2.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map$2 = getNative$2(root$4, 'Map');\nvar nativeCreate$2 = getNative$2(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto$4 = Symbol$4 ? Symbol$4.prototype : undefined;\nvar symbolToString$4 = symbolProto$4 ? symbolProto$4.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear$2() {\n  this.__data__ = nativeCreate$2 ? nativeCreate$2(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete$2(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet$2(key) {\n  var data = this.__data__;\n  if (nativeCreate$2) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$2 ? undefined : result;\n  }\n  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas$2(key) {\n  var data = this.__data__;\n  return nativeCreate$2 ? data[key] !== undefined : hasOwnProperty$2.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet$2(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate$2 && value === undefined) ? HASH_UNDEFINED$2 : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash$2.prototype.clear = hashClear$2;\nHash$2.prototype['delete'] = hashDelete$2;\nHash$2.prototype.get = hashGet$2;\nHash$2.prototype.has = hashHas$2;\nHash$2.prototype.set = hashSet$2;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear$2() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete$2(key) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice$2.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet$2(key) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas$2(key) {\n  return assocIndexOf$2(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet$2(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache$2.prototype.clear = listCacheClear$2;\nListCache$2.prototype['delete'] = listCacheDelete$2;\nListCache$2.prototype.get = listCacheGet$2;\nListCache$2.prototype.has = listCacheHas$2;\nListCache$2.prototype.set = listCacheSet$2;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache$2(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear$2() {\n  this.__data__ = {\n    'hash': new Hash$2,\n    'map': new (Map$2 || ListCache$2),\n    'string': new Hash$2\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete$2(key) {\n  return getMapData$2(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet$2(key) {\n  return getMapData$2(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas$2(key) {\n  return getMapData$2(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet$2(key, value) {\n  getMapData$2(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache$2.prototype.clear = mapCacheClear$2;\nMapCache$2.prototype['delete'] = mapCacheDelete$2;\nMapCache$2.prototype.get = mapCacheGet$2;\nMapCache$2.prototype.has = mapCacheHas$2;\nMapCache$2.prototype.set = mapCacheSet$2;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf$2(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq$2(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet$1(object, path) {\n  path = isKey$2(path, object) ? [path] : castPath$2(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey$2(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative$2(value) {\n  if (!isObject$2(value) || isMasked$2(value)) {\n    return false;\n  }\n  var pattern = (isFunction$2(value) || isHostObject$2(value)) ? reIsNative$2 : reIsHostCtor$2;\n  return pattern.test(toSource$2(value));\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString$4(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol$4(value)) {\n    return symbolToString$4 ? symbolToString$4.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$4) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = isKey$2(path, object) ? [path] : castPath$2(path);\n  object = parent(object, path);\n\n  var key = toKey$2(last(path));\n  return !(object != null && hasOwnProperty$2.call(object, key)) || delete object[key];\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath$2(value) {\n  return isArray$2(value) ? value : stringToPath$2(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData$2(map, key) {\n  var data = map.__data__;\n  return isKeyable$2(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative$2(object, key) {\n  var value = getValue$2(object, key);\n  return baseIsNative$2(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey$2(value, object) {\n  if (isArray$2(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol$4(value)) {\n    return true;\n  }\n  return reIsPlainProp$2.test(value) || !reIsDeepProp$2.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable$2(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked$2(func) {\n  return !!maskSrcKey$2 && (maskSrcKey$2 in func);\n}\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet$1(object, baseSlice(path, 0, -1));\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath$2 = memoize$2(function(string) {\n  string = toString$4(string);\n\n  var result = [];\n  if (reLeadingDot$2.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName$2, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar$2, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey$2(value) {\n  if (typeof value == 'string' || isSymbol$4(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$4) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource$2(func) {\n  if (func != null) {\n    try {\n      return funcToString$2.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize$2(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT$2);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize$2.Cache || MapCache$2);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize$2.Cache = MapCache$2;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq$2(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray$2 = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction$2(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject$2(value) ? objectToString$4.call(value) : '';\n  return tag == funcTag$2 || tag == genTag$2;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$2(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$4(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$4(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$4(value) && objectToString$4.call(value) == symbolTag$4);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$4(value) {\n  return value == null ? '' : baseToString$4(value);\n}\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nvar lodash_unset = unset;\n\n/*\nThis manages variables set during the course of play, specifically:\n\t- saving them automatically to browser local storage when changed\n\t- allowing other modules to subscribe to changes\n\t  (e.g. to update something displayed when a variable changes)\n\nThis also maintains proxies on the window object so that authors can use\nvariable names without scoping.\n*/\n\nclass Vars {\n\tconstructor(saveKey) {\n\t\tthis.saveKey = saveKey;\n\t\tthis.state = {};\n\t\tthis.defaults = {};\n\t\tthis.keys = [];\n\t\tthis.listeners = [];\n\t\tthis.autosave = true;\n\t\tthis.verbose = false;\n\t}\n\n\t/*\n\tSets a key's value, saving it to local storage and triggering relevant\n\tlisteners.\n\t*/\n\n\tset(key, value) {\n\t\tconst prevValue = this.get(key);\n\n\t\tif (this.verbose) {\n\t\t\tconsole.log(`Setting var \"${key}\" to \"${value}\"`);\n\t\t}\n\n\t\tlodash_set(this.state, key, value);\n\n\t\tif (this.keys.indexOf(key) === -1) {\n\t\t\tthis.keys.push(key);\n\n\t\t\t/* Set up the proxy on the window object. */\n\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log(`Setting up proxy properties on window for \"${key}\"`);\n\t\t\t}\t\n\n\t\t\tlodash_unset(window, key);\n\n\t\t\tlet target = window;\n\t\t\tconst dottedProps = key.split('.');\n\t\t\tconst targetKey = dottedProps[dottedProps.length - 1];\n\n\t\t\tfor (let i = 0; i < dottedProps.length - 1; i++) {\n\t\t\t\ttarget[dottedProps[i]] = target[dottedProps[i]] || {};\n\t\t\t\ttarget = target[dottedProps[i]];\n\t\t\t}\n\n\t\t\tObject.defineProperty(target, targetKey, {\n\t\t\t\tget: () => this.get(key),\n\t\t\t\tset: value => this.set(key, value),\n\n\t\t\t\t/* Allow overwriting. */\n\t\t\t\tconfigurable: true\n\t\t\t});\n\t\t}\n\n\t\tif (this.autosave && this.canSave()) {\n\t\t\tthis.save();\n\t\t}\n\n\t\tthis.listeners.forEach(l => {\n\t\t\tif (l.regexp.test(key)) {\n\t\t\t\tl.func(key, value, prevValue, this);\n\t\t\t}\n\t\t});\n\t}\n\n\t/*\n\tSets a default value for a key. If the key is currently unset, this also\n\tsets it.\n\t*/\n\n\tdefault(key, value) {\n\t\tconst needToSet = this.get(key) === undefined;\n\n\t\tthis.defaults[key] = value;\n\t\t\n\t\tif (needToSet) {\n\t\t\tthis.set(key, value);\n\t\t}\n\t}\n\n\t/*\n\tRetrieves a key's value.\n\t*/\n\n\tget(key) {\n\t\treturn lodash_get(this.state, key) || lodash_get(this.defaults, key);\n\t}\n\n\t/*\n\tAdds a function that is called back when a particular key is changed. Pass\n\t'*' to listen to all key changes. This will also call back if a subproperty\n\tis called; that is, if a function listens to 'foo', changes to 'foo.bar' or\n\t'foo.bar.baz' will also trigger a callback.\n\t*/\n\n\taddListener(key, func) {\n\t\tlet regexp;\n\n\t\tif (key === '*') {\n\t\t\tregexp = /.*/;\n\t\t}\n\t\telse {\n\t\t\tregexp = new RegExp('^' + key);\n\t\t}\n\n\t\tthis.listeners.push({regexp, func});\n\t}\n\n\t/*\n\tRemoves an event listener. If the function actually wasn't set as a\n\tlistener, this does nothing.\n\t*/\n\n\tremoveListener(func) {\n\t\tthis.listeners = this.listeners.filter(l => l.func !== func);\n\t}\n\n\t/*\n\tReturns whether it is possible to save values to local storage.\n\t*/\n\n\tcanSave() {\n\t\ttry {\n\t\t\twindow.localStorage.setItem('chapbook-test', 'a');\n\t\t\twindow.localStorage.removeItem('chapbook-test');\n\t\t\treturn true;\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\tSaves all values to local storage for later retrieval by restore().\n\t*/\n\n\tsave() {\n\t\tif (this.verbose) {\n\t\t\tconsole.log('Saving vars');\n\t\t}\n\n\t\ttry {\n\t\t\twindow.localStorage.setItem(\n\t\t\t\tthis.saveKey,\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tvars: this.keys.reduce(\n\t\t\t\t\t\t(result, r) => {\n\t\t\t\t\t\t\tresult[r] = lodash_get(this.state, r);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error(`Could not save the story state (${e.message}).`);\n\t\t}\n\t}\n\n\tcanRestore() {\n\t\treturn this.canSave() &&\n\t\t\twindow.localStorage.getItem(this.saveKey) !== null;\n\t}\n\n\trestore() {\n\t\tif (this.verbose) {\n\t\t\tconsole.log('Restoring vars');\n\t\t}\n\n\t\tif (this.canRestore()) {\n\t\t\tconst toRestore = JSON.parse(window.localStorage.getItem(this.saveKey));\n\n\t\t\tObject.keys(toRestore.vars).forEach(v => {\n\t\t\t\tthis.set(v, toRestore.vars[v]);\n\t\t\t});\n\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log('Restore complete', this.state);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tif (this.verbose) {\n\t\t\t\tconsole.log('Restoring not possible');\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\tForgets all values, but does not remove defaults. (If you want to do that,\n\tdefault a key to undefined.)\n\t*/\n\n\tforgetAll() {\n\t\tif (this.verbose) {\n\t\t\tconsole.log('Forgetting all vars');\n\t\t}\n\n\t\tthis.state = {};\n\t\tthis.keys = [];\n\t\twindow.localStorage.removeItem(this.saveKey);\n\t}\n}\n\nclass View {\n\tconstructor(el) {\n\t\tthis.el = el;\n\t}\n\n\tshow(html) {\n\t\tthis.el.innerHTML = html;\n\t}\n}\n\nconst Globals = {\n\tinit() {\n\t\t/*\n\t\tLoad the story from the page's HTML.\n\t\t*/\n\n\t\tGlobals.story = new Story();\n\t\tGlobals.story.loadFromHtml(document.querySelector('tw-storydata'));\n\n\t\t/*\n\t\tCreate our variable tracker. We want this to occur as early as possible\n\t\tbecause other modules depend on it. We turn off autosaving so any setup\n\t\tdoesn't blow away pre-existing data in local storage.\n\t\t*/\n\n\t\tGlobals.vars = new Vars(Globals.story.name);\n\t\tGlobals.vars.autosave = false;\n\n\t\t/*\n\t\tCreate template parsers and renderers.\n\t\t*/\n\n\t\tGlobals.parser = new Parser();\n\t\tGlobals.renderer = new Renderer(Globals.vars);\n\t\tModifiers.addBuiltins(Globals.renderer);\n\n\t\t/*\n\t\tConnect our view to the DOM.\n\t\t*/\n\n\t\tGlobals.view = new View(document.querySelector('.page article'));\n\t\tInput.attachTo(Globals.view.el, Globals.vars);\n\t\tLink.attachTo(Globals.view.el, Globals.go);\n\t\tinit(Globals.vars);\n\n\t\t/*\n\t\tSet up header and footer.\n\t\t*/\n\n\t\tGlobals.header = new SideMatter(\n\t\t\tdocument.querySelector('.page header'),\n\t\t\tGlobals.render,\n\t\t\tGlobals.vars\n\t\t);\n\t\tGlobals.footer = new SideMatter(\n\t\t\tdocument.querySelector('.page footer'),\n\t\t\tGlobals.render,\n\t\t\tGlobals.vars\n\t\t);\n\t\tGlobals.footer.left = '_`story.name`_';\n\t\tGlobals.footer.right = '`link(\\'Restart\\').restart()`';\n\n\t\tGlobals.image = Image;\n\t\tGlobals.link = factory;\n\t\tGlobals.input = createFactory(Globals.vars);\n\t\tGlobals.random = new Random();\n\n\t\t/*\n\t\tExpose properties on the window.\n\t\t*/\n\n\t\tObject.assign(window, Globals);\n\n\t\t/*\n\t\tIf possible, resume from where the user last left off--otherwise, start\n\t\tfrom the beginning. This should occur as late as possible in\n\t\tinitialization so that author-set values overwrite defaults.\n\t\t*/\n\t\t\n\t\tGlobals.vars.restore();\n\t\tGlobals.vars.autosave = true;\n\t\tGlobals.vars.default('trail', []);\n\n\t\t/*\n\t\tStart the story.\n\t\t*/\n\n\t\tconst trail = Globals.vars.get('trail');\n\n\t\tif (trail.length > 0) {\n\t\t\t/* Just show the passage without creating a new history entry. */\n\n\t\t\tGlobals.view.show(Globals.show(trail[trail.length - 1]));\n\t\t}\n\t\telse {\n\t\t\tconst startPassage = Globals.story.passages.find(\n\t\t\t\tp => p.id === Globals.story.startNode\n\t\t\t);\n\n\t\t\tif (startPassage) {\n\t\t\t\tGlobals.go(startPassage.name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(`The start passage, with ID ${Global.story.startNode}, does not exist.`);\n\t\t\t}\n\t\t}\n\t},\n\n\trender(source) {\n\t\treturn Globals.renderer.render(Globals.parser.parse(source)).html;\n\t},\n\n\tshow(passageName) {\n\t\tlet passage = Globals.story.passage(passageName);\n\n\t\tif (!passage) {\n\t\t\tthrow new Error(`There is no passage named \"${passageName}\".`);\n\t\t}\n\n\t\treturn Globals.render(passage.source);\n\t},\n\n\tgo(passageName) {\n\t\tconst trail = Globals.vars.get('trail');\n\n\t\ttrail.push(passageName);\n\n\t\tGlobals.vars.set('trail', trail);\n\t\tGlobals.view.show(Globals.show(passageName));\t\n\t},\n\n\trestart() {\n\t\tconst passage = Globals.story.passages.find(\n\t\t\tp => p.id === Globals.story.startNode\n\t\t);\n\n\t\tif (!passage) {\n\t\t\tthrow new Error(`There is no passsage with the ID ${Global.story.startNode}.`);\n\t\t}\n\n\t\tGlobals.vars.forgetAll();\n\t\tGlobals.vars.set('trail', []);\n\t\tGlobals.go(passage.name);\n\t}\n};\n\nGlobals.init();\n\n}());\n</script>\n\t</body>\n</html>","version":"1.0.0"});